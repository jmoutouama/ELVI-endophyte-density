library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
# library(countreg)
library(rmutil)
library(actuar)
# library(SPEI)
library(LaplacesDemon)
library(ggpubr)
library(raster)
# library(rgdal)
library(readxl)
library(ggsci)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("scater")
# library(scater)
library(BiocManager)
library(swfscMisc)
library(bayesplot)
library(extraDistr)
fit_allsites_surv_aghy_ppt <- readRDS(url("https://www.dropbox.com/scl/fi/kpac617znxe2arebi8wqf/fit_allsites_surv_aghy_ppt.rds?rlkey=8okogsfhm0abkeeus810gsgy8&dl=1"))
fit_allsites_surv_aghy_pet <- readRDS(url("https://www.dropbox.com/scl/fi/e98tc65ecu5kq0z90tmuc/fit_allsites_surv_aghy_pet.rds?rlkey=zav1ijycjc0odvfszc3i17w2a&dl=1"))
fit_allsites_surv_aghy_spei <- readRDS(url("https://www.dropbox.com/scl/fi/0wx8mr8ignd36dl5utlrj/fit_allsites_surv_aghy_spei.rds?rlkey=i1w37cl91823m7eioi2gup80i&dl=1"))
fit_allsites_surv_aghy_distance <- readRDS(url("https://www.dropbox.com/scl/fi/ap0uys7p36wy6fl5zm4gk/fit_allsites_surv_aghy_distance.rds?rlkey=ro1rdaplg8hx9dfbx9v5jw605&dl=1"))
fit_allsites_surv_aghy_distance_linear <- readRDS(url("https://www.dropbox.com/scl/fi/3u88o5n2bq1zb74wvsgx7/fit_allsites_surv_aghy_distance_linear.rds?rlkey=igquh02xfwrh1dp8danzv6w0r&dl=1"))
# Convert to data frame
posterior_samples_surv_ppt_df <- as.data.frame(posterior_samples_surv_ppt)
## Plot the coefficients
posterior_samples_surv_ppt <- rstan::extract(fit_allsites_surv_aghy_ppt)
# Convert to data frame
posterior_samples_surv_ppt_df <- as.data.frame(posterior_samples_surv_ppt)
# Get the number of species
n_species <- length(posterior_samples_surv_ppt$bendo_s[1, ])
n_species
# Convert each coefficient into a long-format data frame
surv_ppt_coef_list <- c("bendo_s", "bherb_s", "bclim_s", "bendoclim_s", "bendoherb_s", "bclim2_s", "bendoclim2_s")
surv_ppt_long_data <- list()
for (coef in surv_ppt_coef_list) {
# Extract the coefficient matrix for the current parameter
surv_ppt_coef_matrix <- posterior_samples_surv_ppt[[coef]]
# Convert to long format
surv_ppt_long_data[[coef]] <- as.data.frame(surv_ppt_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'surv_ppt_coef_list'
}
# Combine all into one dataframe
plot_data_surv_ppt <- bind_rows(surv_ppt_long_data)
# Convert species index to numeric
plot_data_surv_ppt$species <- as.numeric(gsub("V", "", plot_data_surv_ppt$species))
# Calculate the mean, median, and 95% credible intervals for each species and coefficient
summary_stats_surv_ppt <- plot_data_surv_ppt %>%
group_by(parameter, species) %>%
summarize(
mean_estimate = mean(estimate),
median_estimate = median(estimate),
lower_CI = quantile(estimate, 0.025),
upper_CI = quantile(estimate, 0.975)
) %>%
ungroup()
# Change species names
summary_stats_surv_ppt$species <- recode(summary_stats_surv_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU"
)
unique(summary_stats_surv_ppt$parameter)
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_surv_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
dev.off()
dev.off()
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_surv_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
## Plot the coefficients
posterior_samples_surv_mh <- rstan::extract(fit_allsites_surv_aghy_distance_linear)
# Get the number of species
n_species <- length(posterior_samples_surv_mh$bendo_s[1, ])
# Convert each coefficient into a long-format data frame
surv_mh_coef_list <- c("bendo_s", "bherb_s", "bclim_s", "bendoclim_s", "bendoherb_s", "bclim2_s", "bendoclim2_s")
surv_mh_long_data <- list()
for (coef in surv_mh_coef_list) {
# Extract the coefficient matrix for the current parameter
surv_mh_coef_matrix <- posterior_samples_surv_mh[[coef]]
# Convert to long format
surv_mh_long_data[[coef]] <- as.data.frame(surv_mh_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'surv_mh_coef_list'
}
surv_mh_coef_list
posterior_samples_surv_mh
surv_mh_coef_matrix
surv_mh_long_data <- list()
for (coef in surv_mh_coef_list) {
# Extract the coefficient matrix for the current parameter
surv_mh_coef_matrix <- posterior_samples_surv_mh[[coef]]
# Convert to long format
surv_mh_long_data[[coef]] <- as.data.frame(surv_mh_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'surv_mh_coef_list'
}
posterior_samples_surv_mh[[coef]]
## Plot the coefficients
posterior_samples_surv_mh <- rstan::extract(fit_allsites_surv_aghy_distance_linear)
posterior_samples_surv_mh
# Convert to data frame
posterior_samples_surv_mh_df <- as.data.frame(posterior_samples_surv_mh)
posterior_samples_surv_mh_df
# Get the number of species
n_species <- length(posterior_samples_surv_mh$bendo_s[1, ])
n_species
posterior_samples_surv_mh[[coef]]
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_surv_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
posterior_samples_grow_ppt <- rstan::extract(fit_allsites_grow_aghy_ppt)
fit_allsites_grow_aghy_ppt <- readRDS(url("https://www.dropbox.com/scl/fi/dqhqkqev0y7uem3jwenc8/fit_allsites_grow_aghy_ppt.rds?rlkey=639eok3pace9i05xaft2dyvbe&dl=1"))
fit_allsites_grow_aghy_pet <- readRDS(url("https://www.dropbox.com/scl/fi/xudvskieehqlyg1i0hljr/fit_allsites_grow_aghy_pet.rds?rlkey=wgk79j044fsumqtb2xpqvwzb1&dl=1"))
fit_allsites_grow_aghy_spei <- readRDS(url("https://www.dropbox.com/scl/fi/ojs1ut85cc650j3o8kub1/fit_allsites_grow_aghy_spei.rds?rlkey=chlnweg1fdql1wshfhwfs7act&dl=1"))
fit_allsites_grow_aghy_distance <- readRDS(url("https://www.dropbox.com/scl/fi/fss05g51j0llees9srzr8/fit_allsites_grow_aghy_distance.rds?rlkey=ni7wzy958fwu10jfsq4svle5r&dl=1"))
fit_allsites_grow_aghy_distance_linear <- readRDS(url("https://www.dropbox.com/scl/fi/cw4dtk21twaillwpb64ul/fit_allsites_grow_aghy_distance_linear.rds?rlkey=chptnx9km9yrmqgikvlvwr73s&dl=1"))
posterior_samples_grow_ppt <- rstan::extract(fit_allsites_grow_aghy_ppt)
# Convert to data frame
posterior_samples_grow_ppt_df <- as.data.frame(posterior_samples_grow_ppt)
# Get the number of species
n_species <- length(posterior_samples_grow_ppt$bendo_g[1, ])
# Convert each coefficient into a long-format data frame
grow_ppt_coef_list <- c("bendo_g", "bherb_g", "bclim_g", "bendoclim_g", "bendoherb_g", "bclim2_g", "bendoclim2_g")
grow_ppt_long_data <- list()
for (coef in grow_ppt_coef_list) {
# Extract the coefficient matrix for the current parameter
grow_ppt_coef_matrix <- posterior_samples_grow_ppt[[coef]]
# Convert to long format
grow_ppt_long_data[[coef]] <- as.data.frame(grow_ppt_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'grow_ppt_coef_list'
}
# Combine all into one dataframe
plot_data_grow_ppt <- bind_rows(grow_ppt_long_data)
# Convert species index to numeric
plot_data_grow_ppt$species <- as.numeric(gsub("V", "", plot_data_grow_ppt$species))
# Calculate the mean, median, and 95% credible intervals for each species and coefficient
summary_stats_grow_ppt <- plot_data_grow_ppt %>%
group_by(parameter, species) %>%
summarize(
mean_estimate = mean(estimate),
median_estimate = median(estimate),
lower_CI = quantile(estimate, 0.025),
upper_CI = quantile(estimate, 0.975)
) %>%
ungroup()
# Change species names
summary_stats_grow_ppt$species <- recode(summary_stats_grow_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU"
)
unique(summary_stats_grow_ppt$parameter)
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_grow_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
# Convert to data frame
posterior_samples_flow_ppt_df <- as.data.frame(posterior_samples_flow_ppt)
fit_allsites_flow_aghy_ppt <- readRDS(url("https://www.dropbox.com/scl/fi/is4m1b6je38i68dfn6bkf/fit_allsites_flow_aghy_ppt.rds?rlkey=oc3jeswl8jpfkrjb0r20jfnng&dl=1"))
fit_allsites_flow_aghy_pet <- readRDS(url("https://www.dropbox.com/scl/fi/8u4tr13xs7jennhsrnbpq/fit_allsites_flow_aghy_pet.rds?rlkey=f2e65i0lu0j81abyiwwtxl2ss&dl=1"))
fit_allsites_flow_aghy_spei <- readRDS(url("https://www.dropbox.com/scl/fi/yaybwm6qn65vg0swkhing/fit_allsites_flow_aghy_spei.rds?rlkey=ncu9cicj1j658r7usohgvxhcw&dl=1"))
fit_allsites_flow_aghy_distance <- readRDS(url("https://www.dropbox.com/scl/fi/lufyihvzkf7gbl8tfyl1n/fit_allsites_flow_aghy_distance.rds?rlkey=aknvr6uyc5ntyf9m033ycrzrx&dl=1"))
fit_allsites_flow_aghy_distance_linear <- readRDS(url("https://www.dropbox.com/scl/fi/bxcpb1vacfdr2tq368arv/fit_allsites_flow_aghy_distance_linear.rds?rlkey=13v9pfkt59ybfjlyntm8r54ef&dl=1"))
posterior_samples_flow_ppt <- rstan::extract(fit_allsites_flow_aghy_ppt)
# Convert to data frame
posterior_samples_flow_ppt_df <- as.data.frame(posterior_samples_flow_ppt)
# Get the number of species
n_species <- length(posterior_samples_flow_ppt$bendo_f[1, ])
# Convert each coefficient into a long-format data frame
flow_ppt_coef_list <- c("bendo_f", "bherb_f", "bclim_f", "bendoclim_f", "bendoherb_f", "bclim2_f", "bendoclim2_f")
flow_ppt_long_data <- list()
for (coef in flow_ppt_coef_list) {
# Extract the coefficient matrix for the current parameter
flow_ppt_coef_matrix <- posterior_samples_flow_ppt[[coef]]
# Convert to long format
flow_ppt_long_data[[coef]] <- as.data.frame(flow_ppt_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'flow_ppt_coef_list'
}
# Combine all into one dataframe
plot_data_flow_ppt <- bind_rows(flow_ppt_long_data)
# Convert species index to numeric
plot_data_flow_ppt$species <- as.numeric(gsub("V", "", plot_data_flow_ppt$species))
# Calculate the mean, median, and 95% credible intervals for each species and coefficient
summary_stats_flow_ppt <- plot_data_flow_ppt %>%
group_by(parameter, species) %>%
summarize(
mean_estimate = mean(estimate),
median_estimate = median(estimate),
lower_CI = quantile(estimate, 0.025),
upper_CI = quantile(estimate, 0.975)
) %>%
ungroup()
# Change species names
summary_stats_flow_ppt$species <- recode(summary_stats_flow_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU"
)
unique(summary_stats_flow_ppt$parameter)
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_flow_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
# Project:
# Purpose: Plot  vital rate models (survival, growth, flowering and spikelet).
# Authors: Jacob Moutouama
# Date last modified (Y-M-D):
rm(list = ls())
rm(list = ls())
# load packages
# remove.packages(c("StanHeaders", "rstan"))
# install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
# library(countreg)
library(rmutil)
library(actuar)
# library(SPEI)
library(LaplacesDemon)
library(ggpubr)
library(raster)
# library(rgdal)
library(readxl)
library(ggsci)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("scater")
# library(scater)
library(BiocManager)
library(swfscMisc)
library(bayesplot)
library(extraDistr)
# Define some basic functions that we'll use later
quote_bare <- function(...) {
substitute(alist(...)) %>%
eval() %>%
sapply(deparse)
}
set.seed(13)
# Demographic data -----
# Merge the demographic census
datini <- read.csv("https://www.dropbox.com/scl/fi/exwmw8z8vp1qkf8inyeoq/Initialdata.csv?rlkey=kez08s92dgh9v0i08269kx1iq&dl=1", stringsAsFactors = F)
dat23 <- read.csv("https://www.dropbox.com/scl/fi/9ob0vpu2xdq8x7u48866s/census2023.csv?rlkey=i2loj3fezymq1p41bo5lsj3uj&dl=1", stringsAsFactors = F)
dat24 <- read.csv("https://www.dropbox.com/scl/fi/s8pnf1j7c85g6jwc944vw/census2024.csv?rlkey=kwt2x8k16q4w7gndm42komj6o&dl=1", stringsAsFactors = F)
datherbivory <- read.csv("https://www.dropbox.com/scl/fi/suy4twdhy36el0k7ytqsi/herbivory.csv?rlkey=hs4xbjn1zrpnpitry30ng538d&dl=1", stringsAsFactors = F)
# unique(datini$Site)
# unique(datini$dat23)
# unique(datini$dat24)
# names(dat23)
# calculate the average spikelet and inflorescence number for each census
dat23 %>%
mutate(spikelet_23 = round(rowMeans(across(Spikelet_A:Spikelet_C), na.rm = T)), digit = 0) -> dat23_spike
dat24 %>%
mutate(spikelet_24 = round(rowMeans(across(Spikelet_A:Spikelet_C), na.rm = T), digit = 0), Inf_24 = round(rowMeans(across(attachedInf_24:brokenInf_24), na.rm = T), digit = 0)) -> dat24_spike
## Merge the initial data with the 23 data and the 23 data with the 24 -----
datini23 <- left_join(x = datini, y = dat23_spike, by = c("Tag_ID"))
names(datini23)
dat2324 <- left_join(x = datini23, y = dat24_spike, by = c("Tag_ID"))
names(dat2324)
dat2324 %>%
mutate(
tiller_t = Tiller_23,
tiller_t1 = Tiller_24,
inf_t = Inf_23,
inf_t1 = Inf_24,
spikelet_t = spikelet_23,
spikelet_t1 = spikelet_24,
tiller_Herb_t = tiller_Herb,
tiller_Herb_t1 = tiller_herb_24
) %>%
dplyr::select(
Site,
Species,
Plot,
Position,
Tag_ID,
Population,
Clone,
GreenhouseID,
Endo,
tiller_t,
tiller_t1,
inf_t,
inf_t1,
spikelet_t,
spikelet_t1,
tiller_Herb_t,
tiller_Herb_t1,
date_23,
date_24
) -> dat2324_t_t1
## Merge the demographic data with the herbivory data -----
dat2324_t_t1_herb <- left_join(x = dat2324_t_t1, y = datherbivory, by = c("Site", "Plot", "Species")) # Merge the demographic data with the herbivory data
head(dat2324_t_t1_herb)
unique(dat2324_t_t1_herb$Species)
# view(dat2324_t_t1_herb)
dat2324_t_t1_herb %>%
filter(tiller_t1 > 0) %>%
dplyr::select(Species, spikelet_t1) %>%
group_by(Species) %>%
summarise(n = sum(spikelet_t1, na.rm = T))
# Climatic data ----
climate_summary <- readRDS(url("https://www.dropbox.com/scl/fi/z7a57xv1ago4erqrnp0tx/prism_means.rds?rlkey=z0ddxpr7ls4k0x527k5pp2wsx&dl=1"))
climate_summary %>%
rename(Site = site) -> climate_site
distance_species <- readRDS(url("https://www.dropbox.com/scl/fi/kv9j0n2pbiqgrfnm5a4wn/distance_species.rds?rlkey=vni9e8tjw9enwki0mwgnllzjc&dl=1"))
distance_species %>%
rename(Site = site_code) -> distance_species_clean
## Merge the demographic data with the climatic data -----
demography_climate <- left_join(x = dat2324_t_t1_herb, y = climate_site, by = c("Site"))
demography_climate_distance <- left_join(x = demography_climate, y = distance_species_clean, by = c("Site", "Species"))
## Create new variables
demography_climate_distance %>%
mutate(
surv1 = 1 * (!is.na(demography_climate_distance$tiller_t) & !is.na(demography_climate_distance$tiller_t1)),
site_species_plot = interaction(demography_climate_distance$Site, demography_climate_distance$Species, demography_climate_distance$Plot),
grow = (log(demography_climate_distance$tiller_t1 + 1) - log(demography_climate_distance$tiller_t + 1))
) -> demography_climate_distance
# Survival----
## Read and format survival data
demography_climate_distance %>%
subset(tiller_t > 0) %>%
dplyr::select(
Species, Population, Site, Plot, site_species_plot, Endo, Herbivory,
tiller_t, surv1, sum_ppt, mean_pet, mean_spei, distance
) %>%
na.omit() %>%
mutate(
Site = as.integer(factor(Site)),
Species = as.integer(factor(Species)),
Population = as.integer(factor(Population)),
site_species_plot = as.integer(factor(site_species_plot)),
Endo = as.integer(factor(Endo)) - 1,
Herbivory = as.integer(factor(Herbivory)) - 1
) %>%
mutate(
log_size_t0 = log(tiller_t),
surv_t1 = surv1,
ppt = log(sum_ppt),
pet = log(mean_pet),
spei = mean_spei,
distance = log(distance)
) -> demography_climate_distance_surv
# Function to calculate predictions based on the posterior samples
get_predictions <- function(clim, endo, herb, species_index, posterior_samples) {
b0 <- posterior_samples$b0[, species_index]
bendo <- posterior_samples$bendo[, species_index]
bherb <- posterior_samples$bherb[, species_index]
bclim <- posterior_samples$bclim[, species_index]
bendoclim <- posterior_samples$bendoclim[, species_index]
bendoherb <- posterior_samples$bendoherb[, species_index]
bclim2 <- posterior_samples$bclim2[, species_index]
bendoclim2 <- posterior_samples$bendoclim2[, species_index]
# Predicted survival (logit scale)
logit_preds <- b0 +
bendo * endo +
bclim * clim +
bherb * herb +
bendoclim * clim * endo +
bendoherb * endo * herb +
bclim2 * clim^2 +
bendoclim2 * endo * clim^2
# Convert logit to probability using logistic function
pred_probs <- 1 / (1 + exp(-logit_preds))
return(pred_probs)
}
### SPEI (Standardised precipitation-evapotranspiration index)
demography_surv_spei <- list(
nSpp = demography_climate_distance_surv$Species %>% n_distinct(),
nSite = demography_climate_distance_surv$Site %>% n_distinct(),
nPop = demography_climate_distance_surv$Population %>% n_distinct(),
nPlot = demography_climate_distance_surv$site_species_plot %>% n_distinct(),
Spp = demography_climate_distance_surv$Species,
site = demography_climate_distance_surv$Site,
pop = demography_climate_distance_surv$Population,
plot = demography_climate_distance_surv$site_species_plot,
clim = as.vector(demography_climate_distance_surv$spei),
endo = demography_climate_distance_surv$Endo,
herb = demography_climate_distance_surv$Herbivory,
size = demography_climate_distance_surv$log_size_t0,
y = demography_climate_distance_surv$surv_t1,
N = nrow(demography_climate_distance_surv)
)
fit_surv_spei <- readRDS(url("https://www.dropbox.com/scl/fi/0js0md2myjvl2scu69bnm/fit_surv_spei.rds?rlkey=scn11z3a3epfgis8y8jrxke91&dl=1"))
# Create a data frame with all combinations
predictions_spei <- expand.grid(clim = seq(min(demography_surv_spei$clim), max(demography_surv_spei$clim), length.out = 30), endo = c(0, 1), herb = c(0, 1), species = 1:3)
# Extract posterior samples
posterior_samples_spei <- rstan::extract(fit_surv_spei)
# Apply the function to generate predictions for all combinations
n_posterior_samples_spei <- length(posterior_samples_spei$b0) # Number of posterior samples
# Initialize a matrix to hold predictions for each posterior sample
pred_probs_matrix_spei <- matrix(NA, nrow = nrow(predictions_spei), ncol = n_posterior_samples_spei)
# Generate predictions for each combination of climate, endophyte, herbivory, and species
for (i in 1:nrow(predictions_spei)) {
pred_probs_matrix_spei[i, ] <- get_predictions(
predictions_spei$clim[i],
predictions_spei$endo[i],
predictions_spei$herb[i],
predictions_spei$species[i],
posterior_samples_spei
)
}
# Convert the matrix into a data frame with the correct structure
pred_probs_spei <- as.data.frame(pred_probs_matrix_spei)
colnames(pred_probs_spei) <- paste("Posterior_Sample", 1:n_posterior_samples_spei)
# Add the `predictions` columns (clim_s, endo_s, herb_s, species)
pred_probs_spei <- cbind(predictions_spei, pred_probs_spei)
# Reshape the data frame so we have long format for ggplot
pred_probs_long_spei <- gather(pred_probs_spei, key = "Posterior_Sample", value = "Pred_Survival", -clim, -endo, -herb, -species)
# Calculate credible intervals (90% and 95%) and mean survival probability
cred_intervals_spei <- pred_probs_long_spei %>%
group_by(species, endo, herb, clim) %>%
summarise(
lower_90 = quantile(Pred_Survival, 0.05),
upper_90 = quantile(Pred_Survival, 0.95),
lower_95 = quantile(Pred_Survival, 0.025),
upper_95 = quantile(Pred_Survival, 0.975),
median = quantile(Pred_Survival, 0.5),
mean = mean(Pred_Survival) # Calculate the mean survival probability
) %>%
ungroup()
# observed_data should have columns: clim_s, endo_s, herb_s, species, y_s (observed survival)
observed_spei <- data.frame(
clim = demography_surv_spei$clim, #  climate data
endo = demography_surv_spei$endo, #  endophyte status data
herb = demography_surv_spei$herb, #  herbivory status data
species = demography_surv_spei$Spp, #  species data
y = demography_surv_spei$y # Observed survival
)
ggplot(cred_intervals_spei, aes(x = clim, y = mean, color = factor(endo))) +
# geom_line(aes(y = median), linetype = "solid", size = 1) +  # Plot the median survival probability
geom_line(aes(y = mean), linetype = "solid", size = 1) + # Plot the mean survival probability (dashed line)
geom_ribbon(aes(ymin = lower_90, ymax = upper_90, fill = factor(endo)), alpha = 0.3, color = NA) + # Credible interval
geom_point(data = observed_spei, aes(x = clim, y = y, color = factor(endo)), size = 3) + # Observed data points
facet_grid(species ~ herb, scales = "free_y", labeller = labeller(species = c("1" = "AGHY", "2" = "ELVI", "3" = "POAU"), herb = c("0" = "Unfenced", "1" = "Fenced"))) +
labs(
x = "SPEI",
y = "Predicted survival probability",
color = "Endophyte",
fill = "Endophyte",
title = ""
) +
scale_color_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change endophyte labels
scale_fill_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change fill labels
theme_bw() +
theme(
legend.position = c(0.9, 0.8),
legend.title = element_text(size = 10), # Reduce legend title size
legend.text = element_text(size = 12), # Adjust legend text size
axis.title = element_text(size = 13), # Increase axis title size
axis.text = element_text(size = 10), # Increase axis label size
strip.text = element_text(size = 13)
)
