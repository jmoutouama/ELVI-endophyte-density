size = 1) +  # Adds the error bars with credible intervals
facet_grid(~ parameter, scales = "free") +  # Facet by both species and parameter
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = RColorBrewer::brewer.pal(7, "Set1"))  # Use a palette with 7 colors
# Create the coefficient plot with error bars (credible intervals)
# Modify the coefficient plot with a sufficient number of colors
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = parameter)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = RColorBrewer::brewer.pal(7, "Set1"))  # Use a palette with 7 colors
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(species ~ parameter, scales = "free") +  # Facet by both species and parameter
theme_minimal() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(species ~ parameter, scales = "free") +  # Facet by both species and parameter
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid( ~ parameter, scales = "free") +  # Facet by both species and parameter
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(species ~ ., scales = "free") +  # Facet by both species and parameter
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green"))  # Assign unique colors for species
# Combine all into one dataframe
plot_data_surv_ppt <- bind_rows(sur_ppt_long_data)
# Convert species index to numeric
plot_data_surv_ppt$species <- as.numeric(gsub("V", "", plot_data_surv_ppt$species))
library(ggridges)
# Calculate the mean, median, and 95% credible intervals for each species and coefficient
summary_stats_sruv_ppt <- plot_data_surv_ppt %>%
group_by(parameter, species) %>%
summarize(
mean_estimate = mean(estimate),
median_estimate = median(estimate),
lower_CI = quantile(estimate, 0.025),
upper_CI = quantile(estimate, 0.975)
) %>%
ungroup()
# Change species names
summary_stats_sruv_ppt$species <- recode(summary_stats_sruv_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU")
# Change species names
summary_stats_sruv_ppt$species <- recode(summary_stats_sruv_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU")
unique(summary_stats_sruv_ppt$parameter)
# Create the coefficient plot with error bars (credible intervals)
# Modify the coefficient plot with a sufficient number of colors
ggplot(summary_stats_sruv_ppt, aes(x = factor(species), y = mean_estimate, color = parameter)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = RColorBrewer::brewer.pal(7, "Set1"))  # Use a palette with 7 colors
RColorBrewer::brewer.pal(7, "Set1")
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "#E41A1C", "ELVI" = "#377EB8", "PAOU" = "#4DAF4A"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "#E41A1C", "ELVI" = "#377EB8", "PAOU" = "#984EA3"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "#E41A1C", "ELVI" = "#FF7F00", "PAOU" = "#984EA3"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "#E41A1C", "ELVI" = "#FFFF33", "PAOU" = "#984EA3"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "#E41A1C", "ELVI" = "#A65628", "PAOU" = "#984EA3"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "#E41A1C", "ELVI" = "#FF7F00", "PAOU" = "#984EA3"))  # Assign unique colors for species
ggplot(summary_stats, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "#E41A1C", "ELVI" = "#377EB8", "PAOU" = "#984EA3"))  # Assign unique colors for species
ggplot(summary_stats_sruv_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green"))  # Assign unique colors for species
posterior_samples_grow_ppt
# Convert to data frame
posterior_samples_grow_ppt_df <- as.data.frame(posterior_samples_grow_ppt)
# Get the number of species
n_species <- length(posterior_samples_grow_ppt$bendo_s[1,])
# Get the number of species
n_species <- length(posterior_samples_grow_ppt$bendo_g[1,])
n_species
# Convert each coefficient into a long-format data frame
grow_ppt_coef_list <- c("bendo_g", "bherb_g", "bclim_g", "bendoclim_g", "bendoherb_g", "bclim2_g", "bendoclim2_g")
grow_ppt_long_data <- list()
for (coef in grow_ppt_coef_list) {
# Extract the coefficient matrix for the current parameter
grow_ppt_coef_matrix <- posterior_samples_grow_ppt[[coef]]
# Convert to long format
grow_ppt_long_data[[coef]] <- as.data.frame(grow_ppt_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef)  # Use 'coef' instead of 'grow_ppt_coef_list'
}
# Combine all into one dataframe
plot_data_grow_ppt <- bind_rows(grow_ppt_long_data)
# Convert species index to numeric
plot_data_grow_ppt$species <- as.numeric(gsub("V", "", plot_data_grow_ppt$species))
# Calculate the mean, median, and 95% credible intervals for each species and coefficient
summary_stats_grow_ppt <- plot_data_grow_ppt %>%
group_by(parameter, species) %>%
summarize(
mean_estimate = mean(estimate),
median_estimate = median(estimate),
lower_CI = quantile(estimate, 0.025),
upper_CI = quantile(estimate, 0.975)
) %>%
ungroup()
# Change species names
summary_stats_grow_ppt$species <- recode(summary_stats_grow_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU")
unique(summary_stats_grow_ppt$parameter)
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_grow_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1) +  # Adds the error bars with credible intervals
facet_grid(parameter ~ . , scales = "free") +  # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green"))  # Assign unique colors for species
fit_allsites_surv_aghy_distance_linear<-readRDS(url("https://www.dropbox.com/scl/fi/3u88o5n2bq1zb74wvsgx7/fit_allsites_surv_aghy_distance_linear.rds?rlkey=igquh02xfwrh1dp8danzv6w0r&dl=1"))
## Compute predictions using posterior draws
posterior_samples_sur_distance <- rstan::extract(fit_allsites_surv_aghy_distance_linear)
styler:::style_active_file()
# Project:
# Purpose: Fit vital rate models to test the effect of grass-endophyte symbiosis and endophyte hyphal density on  vital rate models (survival, growth, flowering,fertility).
# Note: Raster files are too large to provide in public repository. They are stored on a local machine
# Authors: Jacob Moutouama
# Date last modified (Y-M-D):
rm(list = ls())
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
# library(countreg)
library(rmutil)
library(actuar)
# library(SPEI)
library(LaplacesDemon)
library(ggpubr)
library(raster)
# library(rgdal)
library(readxl)
library(ggsci)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("scater")
# library(scater)
library(BiocManager)
library(swfscMisc)
library(bayesplot)
library(extraDistr)
fit_allsites_surv_aghy_ppt <- readRDS(url("https://www.dropbox.com/scl/fi/kpac617znxe2arebi8wqf/fit_allsites_surv_aghy_ppt.rds?rlkey=8okogsfhm0abkeeus810gsgy8&dl=1"))
fit_allsites_surv_aghy_pet <- readRDS(url("https://www.dropbox.com/scl/fi/e98tc65ecu5kq0z90tmuc/fit_allsites_surv_aghy_pet.rds?rlkey=zav1ijycjc0odvfszc3i17w2a&dl=1"))
fit_allsites_surv_aghy_spei <- readRDS(url("https://www.dropbox.com/scl/fi/0wx8mr8ignd36dl5utlrj/fit_allsites_surv_aghy_spei.rds?rlkey=i1w37cl91823m7eioi2gup80i&dl=1"))
fit_allsites_surv_aghy_distance <- readRDS(url("https://www.dropbox.com/scl/fi/ap0uys7p36wy6fl5zm4gk/fit_allsites_surv_aghy_distance.rds?rlkey=ro1rdaplg8hx9dfbx9v5jw605&dl=1"))
fit_allsites_surv_aghy_distance_linear <- readRDS(url("https://www.dropbox.com/scl/fi/3u88o5n2bq1zb74wvsgx7/fit_allsites_surv_aghy_distance_linear.rds?rlkey=igquh02xfwrh1dp8danzv6w0r&dl=1"))
# Convert to data frame
posterior_samples_surv_ppt_df <- as.data.frame(posterior_samples_surv_ppt)
## Plot the coefficients
posterior_samples_surv_ppt <- rstan::extract(fit_allsites_surv_aghy_ppt)
# Convert to data frame
posterior_samples_surv_ppt_df <- as.data.frame(posterior_samples_surv_ppt)
# Get the number of species
n_species <- length(posterior_samples_surv_ppt$bendo_s[1, ])
n_species
# Convert each coefficient into a long-format data frame
surv_ppt_coef_list <- c("bendo_s", "bherb_s", "bclim_s", "bendoclim_s", "bendoherb_s", "bclim2_s", "bendoclim2_s")
surv_ppt_long_data <- list()
for (coef in surv_ppt_coef_list) {
# Extract the coefficient matrix for the current parameter
surv_ppt_coef_matrix <- posterior_samples_surv_ppt[[coef]]
# Convert to long format
surv_ppt_long_data[[coef]] <- as.data.frame(surv_ppt_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'surv_ppt_coef_list'
}
# Combine all into one dataframe
plot_data_surv_ppt <- bind_rows(surv_ppt_long_data)
# Convert species index to numeric
plot_data_surv_ppt$species <- as.numeric(gsub("V", "", plot_data_surv_ppt$species))
# Calculate the mean, median, and 95% credible intervals for each species and coefficient
summary_stats_surv_ppt <- plot_data_surv_ppt %>%
group_by(parameter, species) %>%
summarize(
mean_estimate = mean(estimate),
median_estimate = median(estimate),
lower_CI = quantile(estimate, 0.025),
upper_CI = quantile(estimate, 0.975)
) %>%
ungroup()
# Change species names
summary_stats_surv_ppt$species <- recode(summary_stats_surv_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU"
)
unique(summary_stats_surv_ppt$parameter)
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_surv_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
dev.off()
dev.off()
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_surv_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
## Plot the coefficients
posterior_samples_surv_mh <- rstan::extract(fit_allsites_surv_aghy_distance_linear)
# Get the number of species
n_species <- length(posterior_samples_surv_mh$bendo_s[1, ])
# Convert each coefficient into a long-format data frame
surv_mh_coef_list <- c("bendo_s", "bherb_s", "bclim_s", "bendoclim_s", "bendoherb_s", "bclim2_s", "bendoclim2_s")
surv_mh_long_data <- list()
for (coef in surv_mh_coef_list) {
# Extract the coefficient matrix for the current parameter
surv_mh_coef_matrix <- posterior_samples_surv_mh[[coef]]
# Convert to long format
surv_mh_long_data[[coef]] <- as.data.frame(surv_mh_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'surv_mh_coef_list'
}
surv_mh_coef_list
posterior_samples_surv_mh
surv_mh_coef_matrix
surv_mh_long_data <- list()
for (coef in surv_mh_coef_list) {
# Extract the coefficient matrix for the current parameter
surv_mh_coef_matrix <- posterior_samples_surv_mh[[coef]]
# Convert to long format
surv_mh_long_data[[coef]] <- as.data.frame(surv_mh_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'surv_mh_coef_list'
}
posterior_samples_surv_mh[[coef]]
## Plot the coefficients
posterior_samples_surv_mh <- rstan::extract(fit_allsites_surv_aghy_distance_linear)
posterior_samples_surv_mh
# Convert to data frame
posterior_samples_surv_mh_df <- as.data.frame(posterior_samples_surv_mh)
posterior_samples_surv_mh_df
# Get the number of species
n_species <- length(posterior_samples_surv_mh$bendo_s[1, ])
n_species
posterior_samples_surv_mh[[coef]]
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_surv_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
posterior_samples_grow_ppt <- rstan::extract(fit_allsites_grow_aghy_ppt)
fit_allsites_grow_aghy_ppt <- readRDS(url("https://www.dropbox.com/scl/fi/dqhqkqev0y7uem3jwenc8/fit_allsites_grow_aghy_ppt.rds?rlkey=639eok3pace9i05xaft2dyvbe&dl=1"))
fit_allsites_grow_aghy_pet <- readRDS(url("https://www.dropbox.com/scl/fi/xudvskieehqlyg1i0hljr/fit_allsites_grow_aghy_pet.rds?rlkey=wgk79j044fsumqtb2xpqvwzb1&dl=1"))
fit_allsites_grow_aghy_spei <- readRDS(url("https://www.dropbox.com/scl/fi/ojs1ut85cc650j3o8kub1/fit_allsites_grow_aghy_spei.rds?rlkey=chlnweg1fdql1wshfhwfs7act&dl=1"))
fit_allsites_grow_aghy_distance <- readRDS(url("https://www.dropbox.com/scl/fi/fss05g51j0llees9srzr8/fit_allsites_grow_aghy_distance.rds?rlkey=ni7wzy958fwu10jfsq4svle5r&dl=1"))
fit_allsites_grow_aghy_distance_linear <- readRDS(url("https://www.dropbox.com/scl/fi/cw4dtk21twaillwpb64ul/fit_allsites_grow_aghy_distance_linear.rds?rlkey=chptnx9km9yrmqgikvlvwr73s&dl=1"))
posterior_samples_grow_ppt <- rstan::extract(fit_allsites_grow_aghy_ppt)
# Convert to data frame
posterior_samples_grow_ppt_df <- as.data.frame(posterior_samples_grow_ppt)
# Get the number of species
n_species <- length(posterior_samples_grow_ppt$bendo_g[1, ])
# Convert each coefficient into a long-format data frame
grow_ppt_coef_list <- c("bendo_g", "bherb_g", "bclim_g", "bendoclim_g", "bendoherb_g", "bclim2_g", "bendoclim2_g")
grow_ppt_long_data <- list()
for (coef in grow_ppt_coef_list) {
# Extract the coefficient matrix for the current parameter
grow_ppt_coef_matrix <- posterior_samples_grow_ppt[[coef]]
# Convert to long format
grow_ppt_long_data[[coef]] <- as.data.frame(grow_ppt_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'grow_ppt_coef_list'
}
# Combine all into one dataframe
plot_data_grow_ppt <- bind_rows(grow_ppt_long_data)
# Convert species index to numeric
plot_data_grow_ppt$species <- as.numeric(gsub("V", "", plot_data_grow_ppt$species))
# Calculate the mean, median, and 95% credible intervals for each species and coefficient
summary_stats_grow_ppt <- plot_data_grow_ppt %>%
group_by(parameter, species) %>%
summarize(
mean_estimate = mean(estimate),
median_estimate = median(estimate),
lower_CI = quantile(estimate, 0.025),
upper_CI = quantile(estimate, 0.975)
) %>%
ungroup()
# Change species names
summary_stats_grow_ppt$species <- recode(summary_stats_grow_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU"
)
unique(summary_stats_grow_ppt$parameter)
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_grow_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
# Convert to data frame
posterior_samples_flow_ppt_df <- as.data.frame(posterior_samples_flow_ppt)
fit_allsites_flow_aghy_ppt <- readRDS(url("https://www.dropbox.com/scl/fi/is4m1b6je38i68dfn6bkf/fit_allsites_flow_aghy_ppt.rds?rlkey=oc3jeswl8jpfkrjb0r20jfnng&dl=1"))
fit_allsites_flow_aghy_pet <- readRDS(url("https://www.dropbox.com/scl/fi/8u4tr13xs7jennhsrnbpq/fit_allsites_flow_aghy_pet.rds?rlkey=f2e65i0lu0j81abyiwwtxl2ss&dl=1"))
fit_allsites_flow_aghy_spei <- readRDS(url("https://www.dropbox.com/scl/fi/yaybwm6qn65vg0swkhing/fit_allsites_flow_aghy_spei.rds?rlkey=ncu9cicj1j658r7usohgvxhcw&dl=1"))
fit_allsites_flow_aghy_distance <- readRDS(url("https://www.dropbox.com/scl/fi/lufyihvzkf7gbl8tfyl1n/fit_allsites_flow_aghy_distance.rds?rlkey=aknvr6uyc5ntyf9m033ycrzrx&dl=1"))
fit_allsites_flow_aghy_distance_linear <- readRDS(url("https://www.dropbox.com/scl/fi/bxcpb1vacfdr2tq368arv/fit_allsites_flow_aghy_distance_linear.rds?rlkey=13v9pfkt59ybfjlyntm8r54ef&dl=1"))
posterior_samples_flow_ppt <- rstan::extract(fit_allsites_flow_aghy_ppt)
# Convert to data frame
posterior_samples_flow_ppt_df <- as.data.frame(posterior_samples_flow_ppt)
# Get the number of species
n_species <- length(posterior_samples_flow_ppt$bendo_f[1, ])
# Convert each coefficient into a long-format data frame
flow_ppt_coef_list <- c("bendo_f", "bherb_f", "bclim_f", "bendoclim_f", "bendoherb_f", "bclim2_f", "bendoclim2_f")
flow_ppt_long_data <- list()
for (coef in flow_ppt_coef_list) {
# Extract the coefficient matrix for the current parameter
flow_ppt_coef_matrix <- posterior_samples_flow_ppt[[coef]]
# Convert to long format
flow_ppt_long_data[[coef]] <- as.data.frame(flow_ppt_coef_matrix) %>%
pivot_longer(cols = everything(), names_to = "species", values_to = "estimate") %>%
mutate(parameter = coef) # Use 'coef' instead of 'flow_ppt_coef_list'
}
# Combine all into one dataframe
plot_data_flow_ppt <- bind_rows(flow_ppt_long_data)
# Convert species index to numeric
plot_data_flow_ppt$species <- as.numeric(gsub("V", "", plot_data_flow_ppt$species))
# Calculate the mean, median, and 95% credible intervals for each species and coefficient
summary_stats_flow_ppt <- plot_data_flow_ppt %>%
group_by(parameter, species) %>%
summarize(
mean_estimate = mean(estimate),
median_estimate = median(estimate),
lower_CI = quantile(estimate, 0.025),
upper_CI = quantile(estimate, 0.975)
) %>%
ungroup()
# Change species names
summary_stats_flow_ppt$species <- recode(summary_stats_flow_ppt$species,
"1" = "AGHY",
"2" = "ELVI",
"3" = "PAOU"
)
unique(summary_stats_flow_ppt$parameter)
# Create the coefficient plot with error bars (credible intervals)
ggplot(summary_stats_flow_ppt, aes(x = factor(species), y = mean_estimate, color = species)) +
geom_pointrange(aes(ymin = lower_CI, ymax = upper_CI),
position = position_dodge(width = 0.6),
size = 1
) + # Adds the error bars with credible intervals
facet_grid(parameter ~ ., scales = "free") + # Facet by both species and parameter
geom_hline(yintercept = 0, linetype = "dashed", color = "black") + # Add horizontal dashed line at y = 0
theme_bw() +
labs(x = "Species", y = "Coefficient Estimate", title = "") +
theme(legend.position = "none") +
scale_color_manual(values = c("AGHY" = "blue", "ELVI" = "red", "PAOU" = "green")) # Assign unique colors for species
