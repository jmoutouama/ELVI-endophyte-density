spikelet_t1,
tiller_Herb_t,
tiller_Herb_t1,
date_23,
date_24)->dat2324_t_t1
#names(dat2324_t_t1)
## Merge the demographic data with the herbivory data -----
dat2324_t_t1_herb<-left_join(x=dat2324_t_t1,y=datherbivory,by=c("Site","Plot","Species"))# Merge the demographic data with the herbivory data
#unique(dat2324_t_t1_herb)
#head(dat2324_t_t1_herb)
#view(dat2324_t_t1_herb)
# ELVLI data
dat2324_t_t1_herb %>%
filter(Species=="ELVI")->dat2324_t_t1_herb_ELVI
#view(dat2324_t_t1_herb_ELVI)
## Consider only 5 sites
dat2324_t_t1_herb_ELVI %>%
filter(Site %in% c("BAS","BFL","COL","HUN","LAF"))->dat2324_t_t1_herb_ELVI_clean
## Find the starting and ending dates are correct
dat2324_t_t1_herb_ELVI_clean %>%
dplyr::select(Site,Species,date_23,date_24) %>%
group_by(Site) %>%
unique()->census_dates
# HOBO data ----
## format date and separate year-month-day
list.files(path = paste0(choose_path,"/Data/HOBO data/"),
pattern = "*.xlsx", full.names = TRUE) %>% # Identify all excel files
lapply(read_excel) %>%                              # Store all files in list
bind_rows ->hobo_data_raw # get HOBO data
tidyr::separate(hobo_data_raw, "date",
into = c('longdate', 'time'),
sep= ' ') %>%
tidyr::separate('longdate', # Separate the ‘longdate’ column into separate columns for month, day and year using the separate() function.
into = c('year','month', 'day'),
sep= '-',
remove = FALSE)->hobo_data_full
#names(hobo_data_full)
## double check if the starting and ending dates are correct
hobo_data_full %>%
group_by(site) %>%
summarise(start=range(longdate)[1],
end=range(longdate)[2],
duration=as.Date(end)-as.Date(start))->hobo_dates
## average over days to look at overall trend across sites
hobo_data_full %>%
group_by(longdate,site,day) %>%
summarise(daily_mean_moist=mean(water),daily_mean_temp=mean(temperature))->HOBO_daily
## to standardize census data with climatic data
HOBO_daily %>%
filter(site=="BAS" & longdate>"2023-06-22" & longdate<"2024-06-14")->HOBO_BAS
HOBO_daily %>%
filter(site=="BFL" & longdate>"2023-06-23" & longdate<"2024-06-14")->HOBO_BFL
HOBO_daily %>%
filter(site=="COL" & longdate>"2023-06-09" & longdate<"2024-06-25")->HOBO_COL
HOBO_daily %>%
filter(site=="HUN" & longdate>"2023-06-07" & longdate<"2024-06-04")->HOBO_HUN
HOBO_daily %>%
filter(site=="LAF" & longdate>"2023-06-13" & longdate<"2024-06-06")->HOBO_LAF
HOBO_daily_all_sites<-rbind(HOBO_BAS,HOBO_BFL,HOBO_COL,HOBO_HUN,HOBO_LAF)
#unique(HOBO_daily_all_sites$site)
## Plot the daily trend for temperature and soil moisture from start to end
HOBO_daily_all_sites %>%
group_by(site) %>%
summarise(mean_temp=mean(daily_mean_temp),
mean_moisture=mean(daily_mean_moist))->hobo_means
data_plotclim<-data.frame(site=c(HOBO_daily_all_sites$site,HOBO_daily_all_sites$site),daily_mean_clim=c(HOBO_daily_all_sites$daily_mean_temp,HOBO_daily_all_sites$daily_mean_moist),date=c(HOBO_daily_all_sites$longdate,HOBO_daily_all_sites$longdate),clim=c(rep("temp",nrow(HOBO_daily_all_sites)),rep("water",nrow(HOBO_daily_all_sites))))
site_names <- c("LAF"="Lafayette",
"HUN"="Huntville",
"BAS"="Bastrop",
"COL"="College Station",
"BFL" ="Brackenridge")
figtempsite<-ggplot(HOBO_daily_all_sites, aes(x=as.Date(longdate, format= "%Y - %m - %d"), y=daily_mean_temp))+
geom_line(aes(colour=site))+
ggtitle("a")+
scale_fill_jco()+
theme_bw()+
theme(legend.position = "none",
axis.text.x = element_text(size=4.5,color="black", angle=0))+
labs( y="Daily temperature  (°C)", x="")+
# facet_grid(~factor(site,levels=c("LAF", "HUN", "BAS", "COL" ,"KER" ,"BLF", "SON")))+
facet_grid(~site,labeller = labeller(site=site_names))+
geom_hline(data=hobo_means,aes(yintercept = mean_temp,colour=site))
figmoistsite<-ggplot(HOBO_daily_all_sites, aes(x=as.Date(longdate, format= "%Y - %m - %d"), y=daily_mean_moist))+
geom_line(aes(colour=site))+
ggtitle("b")+
scale_fill_jco()+
theme_bw()+
theme(legend.position = "none",
axis.text.x = element_text(size=4.55, color="black",angle=0))+
labs( y="Daily soil moisture (wfv)", x="Month")+
facet_grid(~site,labeller = labeller(site=site_names))+
geom_hline(data=hobo_means,aes(yintercept = mean_moisture,colour=site))
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Figure/climatesite.pdf",height =5,width=9,useDingbats = F)
(Figclimatesite<-ggpubr::ggarrange(figtempsite,figmoistsite,common.legend = FALSE,ncol = 1, nrow = 2))
dev.off()
## Average over days
HOBO_daily_all_sites %>%
group_by(site)%>%
summarise(water_mean = mean(daily_mean_moist),
water_cv=sd(daily_mean_moist)/water_mean,
temp_mean = mean(daily_mean_temp),
temp_cv=sd(daily_mean_temp)/temp_mean) %>%
left_join(.,hobo_dates,by=c("site"))->HOBO_summary
HOBO_summary
HOBO_summary %>%
rename(Site=site)->HOBO_summary_clean
## Merge the demographic data with the climatic data -----
demography_climate<-left_join(x=dat2324_t_t1_herb_ELVI_clean,y=HOBO_summary_clean,by=c("Site"))# Merge the demographic data with the temperature data
demography_climate$surv1<-1*(!is.na(demography_climate$tiller_t) & !is.na(demography_climate$tiller_t1))
demography_climate$site_plot<-interaction(demography_climate$Site,demography_climate$Plot)
demography_climate$grow<-(log(demography_climate$tiller_t1+1) - log(demography_climate$tiller_t+1))# Relative growth rate
# names(demography_climate)
# view(demography_climate)
#summary(demography_climate)
hist(demography_climate$grow,main="")
## Survival----
## Read and format survival data to build the model
demography_climate %>%
subset( tiller_t > 0 )%>%
dplyr::select(Population, Site, Plot,site_plot, Endo, Herbivory,
tiller_t, surv1,temp_mean,temp_cv,water_mean,water_cv)%>%
na.omit %>%
mutate( Site= Site %>% as.factor %>% as.numeric,
Plot = Plot %>% as.factor %>% as.numeric,
site_plot=site_plot %>% as.factor %>% as.numeric,
Endo = Endo %>% as.factor %>% as.numeric,
Herbivory=Herbivory %>% as.factor %>% as.numeric,
Population = Population %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0 = log(tiller_t),
surv_t1=surv1,
log_temp_mean = log(temp_mean),
log_temp_cv = log(temp_cv),
log_water_mean = log(water_mean),
log_water_cv = log(water_cv))->demography_climate_elvi_surv
## Separate each variable to use the same model stan
data_sites_surv_temp_mean <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$log_temp_mean),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y.s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
data_sites_surv_temp_mean
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_surv_temp_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/elvi_survival.stan",
data = data_sites_surv_temp_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
data_sites_surv_temp_cv <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$log_temp_cv),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y_s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
data_sites_surv_temp_cv
fit_allsites_surv_temp_cv <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/elvi_survival.stan",
data = data_sites_surv_temp_cv,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_surv_temp_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/elvi_survival.stan",
data = data_sites_surv_temp_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
remove.packages("rstan")
# load packages
remove.packages(c("StanHeaders"))
rm(list = ls())
# load packages
#remove.packages(c("StanHeaders", "rstan"))
#install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
#library(countreg)
library(rmutil)
library(actuar)
#library(SPEI)
library(LaplacesDemon)
library(ggpubr)
library(raster)
library(rgdal)
library(readxl)
library(ggsci)
library(BiocManager)
library(swfscMisc)
# Define some basic functions that we'll use later
quote_bare <- function( ... ){
substitute( alist(...) ) %>%
eval( ) %>%
sapply(deparse )
}
invlogit<-function(x){exp(x)/(1+exp(x))}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
jacob_path<-"/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density"
# tom_path<-"C:/Users/tm9/Dropbox/github/ELVI-endophyte-density"
choose_path<-jacob_path
# Demographic data -----
# Merge the demographic census
datini<-read_csv(paste0(choose_path,"/Data/Initialdata.csv"))
dat23<-read_csv(paste0(choose_path,"/Data/census2023.csv"))
dat24<-read_csv(paste0(choose_path,"/Data/census2024.csv"))
datherbivory<-read_csv(paste0(choose_path,"/Data/herbivory.csv"))
# unique(datini$Site)
# unique(datini$dat23)
# unique(datini$dat24)
# names(dat23)
# calculate the total spikelet for each census
dat23 %>%
mutate(spikelet_23=rowSums(across(Spikelet_A:Spikelet_C)))->dat23_spike
dat24 %>%
mutate(spikelet_24=rowSums(across(Spikelet_A:Spikelet_C)),Inf_24=rowSums(across(attachedInf_24:brokenInf_24)))->dat24_spike
## Merge the initial data with the 23 data and the 23 data with the 24 -----
datini23 <- left_join(x = datini,y =dat23_spike,by=c("Tag_ID"))
names(datini23)
dat2324 <- left_join(x = datini23 ,y =dat24_spike,by=c("Tag_ID"))
names(dat2324)
dat2324 %>%
mutate(tiller_t=Tiller_23,
tiller_t1=Tiller_24,
inf_t=Inf_23,
inf_t1=Inf_24,
spikelet_t=spikelet_23,
spikelet_t1=spikelet_24,
tiller_Herb_t=tiller_Herb,
tiller_Herb_t1=tiller_herb_24) %>%
dplyr::select(Site,
Species,
Plot,
Position,
Tag_ID,
Population,
Clone,
GreenhouseID,
Endo,
tiller_t,
tiller_t1,
inf_t,
inf_t1,
spikelet_t,
spikelet_t1,
tiller_Herb_t,
tiller_Herb_t1,
date_23,
date_24)->dat2324_t_t1
#names(dat2324_t_t1)
## Merge the demographic data with the herbivory data -----
dat2324_t_t1_herb<-left_join(x=dat2324_t_t1,y=datherbivory,by=c("Site","Plot","Species"))# Merge the demographic data with the herbivory data
#unique(dat2324_t_t1_herb)
#head(dat2324_t_t1_herb)
#view(dat2324_t_t1_herb)
# ELVLI data
dat2324_t_t1_herb %>%
filter(Species=="ELVI")->dat2324_t_t1_herb_ELVI
#view(dat2324_t_t1_herb_ELVI)
## Consider only 5 sites
dat2324_t_t1_herb_ELVI %>%
filter(Site %in% c("BAS","BFL","COL","HUN","LAF"))->dat2324_t_t1_herb_ELVI_clean
#view(dat2324_t_t1_herb_ELVI_clean)
#dim(dat2324_t_t1_herb_ELVI_clean)
## Find the starting and ending dates are correct
dat2324_t_t1_herb_ELVI_clean %>%
dplyr::select(Site,Species,date_23,date_24) %>%
group_by(Site) %>%
unique()->census_dates
# HOBO data ----
## format date and separate year-month-day
list.files(path = paste0(choose_path,"/Data/HOBO data/"),
pattern = "*.xlsx", full.names = TRUE) %>% # Identify all excel files
lapply(read_excel) %>%                              # Store all files in list
bind_rows ->hobo_data_raw # get HOBO data
tidyr::separate(hobo_data_raw, "date",
into = c('longdate', 'time'),
sep= ' ') %>%
tidyr::separate('longdate', # Separate the ‘longdate’ column into separate columns for month, day and year using the separate() function.
into = c('year','month', 'day'),
sep= '-',
remove = FALSE)->hobo_data_full
#names(hobo_data_full)
## double check if the starting and ending dates are correct
hobo_data_full %>%
group_by(site) %>%
summarise(start=range(longdate)[1],
end=range(longdate)[2],
duration=as.Date(end)-as.Date(start))->hobo_dates
## average over days to look at overall trend across sites
hobo_data_full %>%
group_by(longdate,site,day) %>%
summarise(daily_mean_moist=mean(water),daily_mean_temp=mean(temperature))->HOBO_daily
## to standardize census data with climatic data
HOBO_daily %>%
filter(site=="BAS" & longdate>"2023-06-22" & longdate<"2024-06-14")->HOBO_BAS
HOBO_daily %>%
filter(site=="BFL" & longdate>"2023-06-23" & longdate<"2024-06-14")->HOBO_BFL
HOBO_daily %>%
filter(site=="COL" & longdate>"2023-06-09" & longdate<"2024-06-25")->HOBO_COL
HOBO_daily %>%
filter(site=="HUN" & longdate>"2023-06-07" & longdate<"2024-06-04")->HOBO_HUN
HOBO_daily %>%
filter(site=="LAF" & longdate>"2023-06-13" & longdate<"2024-06-06")->HOBO_LAF
HOBO_daily_all_sites<-rbind(HOBO_BAS,HOBO_BFL,HOBO_COL,HOBO_HUN,HOBO_LAF)
#unique(HOBO_daily_all_sites$site)
## Plot the daily trend for temperature and soil moisture from start to end
HOBO_daily_all_sites %>%
group_by(site) %>%
summarise(mean_temp=mean(daily_mean_temp),
mean_moisture=mean(daily_mean_moist))->hobo_means
data_plotclim<-data.frame(site=c(HOBO_daily_all_sites$site,HOBO_daily_all_sites$site),daily_mean_clim=c(HOBO_daily_all_sites$daily_mean_temp,HOBO_daily_all_sites$daily_mean_moist),date=c(HOBO_daily_all_sites$longdate,HOBO_daily_all_sites$longdate),clim=c(rep("temp",nrow(HOBO_daily_all_sites)),rep("water",nrow(HOBO_daily_all_sites))))
site_names <- c("LAF"="Lafayette",
"HUN"="Huntville",
"BAS"="Bastrop",
"COL"="College Station",
"BFL" ="Brackenridge")
figtempsite<-ggplot(HOBO_daily_all_sites, aes(x=as.Date(longdate, format= "%Y - %m - %d"), y=daily_mean_temp))+
geom_line(aes(colour=site))+
ggtitle("a")+
scale_fill_jco()+
theme_bw()+
theme(legend.position = "none",
axis.text.x = element_text(size=4.5,color="black", angle=0))+
labs( y="Daily temperature  (°C)", x="")+
# facet_grid(~factor(site,levels=c("LAF", "HUN", "BAS", "COL" ,"KER" ,"BLF", "SON")))+
facet_grid(~site,labeller = labeller(site=site_names))+
geom_hline(data=hobo_means,aes(yintercept = mean_temp,colour=site))
figmoistsite<-ggplot(HOBO_daily_all_sites, aes(x=as.Date(longdate, format= "%Y - %m - %d"), y=daily_mean_moist))+
geom_line(aes(colour=site))+
ggtitle("b")+
scale_fill_jco()+
theme_bw()+
theme(legend.position = "none",
axis.text.x = element_text(size=4.55, color="black",angle=0))+
labs( y="Daily soil moisture (wfv)", x="Month")+
facet_grid(~site,labeller = labeller(site=site_names))+
geom_hline(data=hobo_means,aes(yintercept = mean_moisture,colour=site))
figmoistsite
figtempsite
## Average over days
HOBO_daily_all_sites %>%
group_by(site)%>%
summarise(water_mean = mean(daily_mean_moist),
water_cv=sd(daily_mean_moist)/water_mean,
temp_mean = mean(daily_mean_temp),
temp_cv=sd(daily_mean_temp)/temp_mean) %>%
left_join(.,hobo_dates,by=c("site"))->HOBO_summary
HOBO_summary %>%
rename(Site=site)->HOBO_summary_clean
## Merge the demographic data with the climatic data -----
demography_climate<-left_join(x=dat2324_t_t1_herb_ELVI_clean,y=HOBO_summary_clean,by=c("Site"))# Merge the demographic data with the temperature data
demography_climate$surv1<-1*(!is.na(demography_climate$tiller_t) & !is.na(demography_climate$tiller_t1))
demography_climate$site_plot<-interaction(demography_climate$Site,demography_climate$Plot)
demography_climate$grow<-(log(demography_climate$tiller_t1+1) - log(demography_climate$tiller_t+1))# Relative growth rate
# names(demography_climate)
# view(demography_climate)
#summary(demography_climate)
hist(demography_climate$grow,main="")
## Survival----
## Read and format survival data to build the model
demography_climate %>%
subset( tiller_t > 0 )%>%
dplyr::select(Population, Site, Plot,site_plot, Endo, Herbivory,
tiller_t, surv1,temp_mean,temp_cv,water_mean,water_cv)%>%
na.omit %>%
mutate( Site= Site %>% as.factor %>% as.numeric,
Plot = Plot %>% as.factor %>% as.numeric,
site_plot=site_plot %>% as.factor %>% as.numeric,
Endo = Endo %>% as.factor %>% as.numeric,
Herbivory=Herbivory %>% as.factor %>% as.numeric,
Population = Population %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0 = log(tiller_t),
surv_t1=surv1,
log_temp_mean = log(temp_mean),
log_temp_cv = log(temp_cv),
log_water_mean = log(water_mean),
log_water_cv = log(water_cv))->demography_climate_elvi_surv
## Separate each variable to use the same model stan
data_sites_surv_temp_mean <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$log_temp_mean),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y.s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
demography_climate
## Separate each variable to use the same model stan
data_sites_surv_temp_mean <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$log_temp_mean),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y.s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
data_sites_surv_temp_mean
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_surv_temp_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/elvi_survival.stan",
data = data_sites_surv_temp_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
## Separate each variable to use the same model stan
data_sites_surv_temp_mean <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$log_temp_mean),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y_s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
data_sites_surv_temp_mean
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_surv_temp_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/elvi_survival.stan",
data = data_sites_surv_temp_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
