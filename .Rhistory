labs(x="Longitude",y="Mahalanobis distance")+
geom_point(aes(color = Species))+
geom_smooth(method = "gam", formula = y ~ s(x,k=4), aes(color = Species,fill=Species), se = TRUE,alpha = 0.2) +  #
facet_wrap(~Species, ncol = 3, nrow = 1,labeller=labeller(Species=c("AGHY"="A. hyemalis","ELVI"="E. virginicus","POAU"="P. autumnalis")))+
#geom_text(data = stat_results, aes(x = -94, y = 20, label = label), inherit.aes = FALSE) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))+
scale_fill_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))+
theme_bw()+
theme(legend.position ="none",
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
strip.text.x = element_text(size=12, color="black",
face="bold.italic"))
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Figure/distance_vs_longitude_gam.pdf",useDingbats = F,height=6,width=12)
ggplot(distance_species, aes(x = longitude, y = distance))+
labs(x="Longitude",y="Mahalanobis distance")+
geom_point(aes(color = Species))+
geom_smooth(method = "gam", formula = y ~ s(x,k=4), aes(color = Species,fill=Species), se = TRUE,alpha = 0.2) +  #
facet_wrap(~Species, ncol = 3, nrow = 1,labeller=labeller(Species=c("AGHY"="A. hyemalis","ELVI"="E. virginicus","POAU"="P. autumnalis")))+
#geom_text(data = stat_results, aes(x = -94, y = 20, label = label), inherit.aes = FALSE) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))+
scale_fill_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))+
theme_bw()+
theme(legend.position ="none",
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
strip.text.x = element_text(size=12, color="black",
face="bold.italic"))
dev.off()
saveRDS(distance_species, '/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Data/distance_species.rds')
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Figure/SDM.pdf",width=12,height=10,useDingbats = F)
par(mar=c(5,5,2,3),mfrow=c(2,2))
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(99, start=0,end=1)),legend=TRUE)
#points(aghy[,c("lon","lat")],pch=23,cex=0.3,col="grey")
#plot(garden_map,add=T,pch = 3,col="black",cex =2)
#plot(source_map,add=T,pch = 21,col="black",bg="red",cex =1)
mtext("A",side = 3, adj = 0,cex=1.25)
mtext(~ italic("A. hyemalis"),side = 3, adj = 0.5,cex=1.2,line=0.3)
raster::plot(mProj_elvi$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(99, start=0,end=1)),legend=TRUE)
#points(elvi[,c("lon","lat")],pch=23,cex=0.3,col="grey")
#plot(garden_map,add=T,pch = 3,col="black",cex =2)
#plot(source_map,add=T,pch = 21,col="black",bg="red",cex =1)
mtext("B",side = 3, adj = 0,cex=1.25)
mtext(~ italic("E. virginicus"),side = 3, adj = 0.5,cex=1.2,line=0.3)
raster::plot(mProj_poa$suitRaster,xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(99, start=0,end=1)))
#points(poa[,c("lon","lat")],pch=23,cex=0.3,col="grey")
#plot(garden_map,add=T,pch = 3,col="black",cex =2)
#plot(source_map,add=T,pch = 21,col="black",bg="red",cex =1)
mtext("C",side = 3, adj = 0,cex=1.25)
mtext(~ italic("P. autumnalis"),side = 3, adj = 0.5,cex=1.2,line=0.3)
legend(-119, 25.5,
legend=c( "GBIF occurences","Common garden sites"),
pch = c(23,3),
pt.cex=c(1.5,1.5),
col = c("grey50","black"),
pt.bg=c("grey","black"),
cex = 1,
bty = "n",
horiz = F ,
)
dev.off()
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(6, start=0,end=1)),legend=TRUE)
dev.off()
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(6, start=0,end=1)),legend=TRUE)
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(10, start=0,end=1)),legend=TRUE)
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(20, start=0,end=1)),legend=TRUE)
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(30, start=0,end=1)),legend=TRUE)
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(40, start=0,end=1)),legend=TRUE)
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(50, start=0,end=1)),legend=TRUE)
raster::plot(mProj_elvi$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rev(rainbow(99, start=0,end=0.9)),legend=TRUE)
raster::plot(mProj_aghy$suitRaster,main="",xlab="Longitude", ylab="Latitude",cex.lab=1.5,col=rainbow(50, start=0,end=1),legend=TRUE)
rm(list=ls(all=T)) # Clears R's short term memory
library(knitr)
opts_chunk$set(external=TRUE,echo=F,warning=FALSE,fig.pos='H', global.device = TRUE)
a4width<- 8.3
a4height<- 11.7
options(knitr.table.format = "latex")
# Load the required packages
library(taxize)
library(ape)
library(phytools)
library(ade4)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidytree)
library(aplot)
library(cowplot)
library(ggpubr)
library(ggsci)
library(R.rsp)
library(flextable)
library(effectsize)
library(metafor)
library(esc)
library(knitr)
library(tidyverse)
library(brms)
library(coda)
library(modelr)
library(gridExtra)
library(pBrackets)
library(performance)
library(kableExtra)
library(tidybayes)
library(formattable)
library(grid)
library(rstan)
library(bayesplot)
library(stringr)
library(rgbif)
set.seed(13)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Ftable <- function(model, reorder = F, order, percent = F){
table <- summary(model)$fixed
table2 <-summary(model, prob = 0.9)$fixed %>% as_tibble()
names <- rownames(table)
table <- table %>%
as_tibble() %>%
dplyr::rename('L95%CL' = `l-95% CI`, 'U95%CL' = `u-95% CI`) %>%
select(-Rhat, -Bulk_ESS, -Tail_ESS)
table$`L90%CL` <- table2$`l-90% CI`
table$`U90%CL` <- table2$`u-90% CI`
table <-table %>%
mutate(Estimate = ifelse(`L95%CL`	* `U95%CL` > 0,
paste(sprintf('%.3f', round(Estimate, 3)),  '*', sep = ''),
ifelse(`L90%CL`	* `U90%CL` > 0,
paste(sprintf('%.3f', round(Estimate, 3)), '\206', sep = ''), round(Estimate, 3))),
rowname = names) %>%
dplyr::rename('SE    ' = Est.Error)  %>%
column_to_rownames(var = 'rowname')
if (reorder == T){
table <- table[order,]
}
table <- table %>%
kable(digits = 3, escape = F, table.attr = "style = \"color: black;\"") %>%
kable_styling(position = "left")
return(table)
}
theme <-  theme(panel.background = element_blank(),
panel.border = element_rect(fill = NA),
strip.background = element_blank(),
axis.text.x = element_text(size = 10, colour = 'black'),
axis.text.y = element_text(size = 10, colour = 'black'),
#text        = element_text(size = 8),
axis.title.y = element_text(size = 10),# size of y lab
axis.title.x = element_text(size = 10),# size of X lab
legend.position     = "none",
legend.title        = element_text(size = 9),
legend.text         = element_text(size = 8),
legend.key.height   = unit(0.8,'line'),
legend.background   = element_blank(),
legend.key          = element_rect(colour = NA, fill = NA),
plot.title  = element_text(hjust = 0.5),
plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = "cm"))
dat_meta <- read.csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/DataEntry_Meta_Analysis.csv", header = T) # import the data
sp.meta<-unique(dat_meta$Species) # select the species present in the data base
sp.meta_kingdom<-name_backbone_checklist(name_data =sp.meta)
sp.meta_kingdom<-data.frame(Species=sp.meta,Kingdom=sp.meta_kingdom$kingdom) # find each species kingdom
dat_meta_kg<-left_join(x=dat_meta,y=sp.meta_kingdom,by="Species") # match each species kingdom with the original dataframe
names(dat_meta_kg)
dat_meta_kg %>%
filter(Kingdom=="Plantae")->dat_plant
dat_plant %>%
select(Study_ID,Setting) %>%
unique() %>%
group_by(Setting) %>%
summarise(n=n())
dat_plant
dat_plant %>%
select(Study_ID,Pub_Year,Species,F,Xf,N_f,SE_f,SD_f,M,Xm,N_m,SE_m,SD_m,Xm,Env_treatment,Response_var,Env_var_type) %>%
filter(!is.na(Xf) & !is.na(Xm)) %>%
mutate(SD_f = if_else(SD_f == 0, 0.0001, SD_f),SD_m = if_else(SD_m == 0, 0.0001, SD_m))->dat_plant_X_mf
dat_plant_SMD <- escalc("SMDH", m1i = Xm, m2i = Xf, sd1i = SD_m, sd2i = SD_f, n1i = N_m, n2i = N_f, data = dat_plant_X_mf)
#view(dat_plant_SMD)
dat_plant_SMD %>%
mutate(se=sqrt(vi),Study_ID=as.factor(Study_ID),Species=as.factor(Species)) %>%
drop_na(vi)->dat_plant_d_SMD_brms
dat_plant_d_SMD_brms
unique(dat_plant_d_SMD_brms$Env_treatment)
unique(dat_plant_d_SMD_brms$Env_var_type)
plotSimmap(planttree_phylo_signal,type="fan",part=0.5,fsize=1, ftype="i")
library(metafor)
library(metafor)
data <- data.frame(
temp_group = c("Low", "High"),  # Temperature category
males = c(40, 60),              # Male counts
females = c(60, 40),            # Female counts
temperature = c(20, 30)         # Corresponding temperatures
)
data
data$sex_ratio <- data$males / (data$males + data$females)
print(data)
# Define means, SDs, and sample sizes
m1 <- mean(data$sex_ratio[data$temp_group == "Low"])  # Mean sex ratio at Low temp
m2 <- mean(data$sex_ratio[data$temp_group == "High"]) # Mean sex ratio at High temp
sd1 <- sd(data$sex_ratio[data$temp_group == "Low"])   # SD at Low temp
sd2 <- sd(data$sex_ratio[data$temp_group == "High"])  # SD at High temp
n1 <- length(data$sex_ratio[data$temp_group == "Low"])
n2 <- length(data$sex_ratio[data$temp_group == "High"])
# Compute effect size using escalc function
res <- escalc(measure = "SMD", m1i = m1, sd1i = sd1, n1i = n1,
m2i = m2, sd2i = sd2, n2i = n2,
data = data)
print(res)
n2
n1
sd2
data$sex_ratio <- data$males / (data$males + data$females)
data
# Define means, SDs, and sample sizes
m1 <- mean(data$sex_ratio[data$temp_group == "Low"])  # Mean sex ratio at Low temp
m1
print(data)
data <- data.frame(
temperature = c(20, 22, 24, 26, 28, 30),  # Temperature values
males = c(30, 35, 40, 50, 55, 60),       # Male counts
females = c(70, 65, 60, 50, 45, 40)      # Female counts
)
data
data$sex_ratio <- data$males / (data$males + data$females) # sex ratio
data
mod <- lm(sex_ratio ~ temperature, data = data)
summary(model)
summary(mod)
# Extract slope and standard error
slope <- coef(mod)[2]  # Regression slope (change in sex ratio per °C)
slope
se_slope <- summary(mod)$coefficients[2, 2]  # Standard error of the slope
se_slope
# Convert slope to Fisher’s Z
zr <- atanh(slope)  # Fisher’s Z transformation
vz <- 1 / (length(data$temperature) - 3)  # Variance of Zr
vz
print(c(Fisher_Z = zr, Variance = vz))
slope_data <- data.frame(
slope = c(0.02, 0.03, 0.01, 0.025, 0.015),  # Slopes from different studies
se = c(0.005, 0.007, 0.004, 0.006, 0.005)   # Standard errors of the slopes
)
# Convert slopes to Fisher's Z
slope_data$zr <- atanh(slope_data$slope)
slope_data$vz <- slope_data$se^2
slope_data
rm(list=ls(all=T)) # Clears R's short term memory
library(knitr)
opts_chunk$set(external=TRUE,echo=F,warning=FALSE,fig.pos='H', global.device = TRUE)
a4width<- 8.3
a4height<- 11.7
options(knitr.table.format = "latex")
# Load the required packages
library(taxize)
library(ape)
library(phytools)
library(ade4)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidytree)
library(aplot)
library(cowplot)
library(ggpubr)
library(ggsci)
library(R.rsp)
library(flextable)
library(effectsize)
library(metafor)
library(esc)
library(knitr)
library(tidyverse)
library(brms)
library(coda)
library(modelr)
library(gridExtra)
library(pBrackets)
library(performance)
library(kableExtra)
library(tidybayes)
library(formattable)
library(grid)
library(rstan)
library(bayesplot)
library(stringr)
library(rgbif)
set.seed(13)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
rm(list=ls(all=T)) # Clears R's short term memory
library(knitr)
opts_chunk$set(external=TRUE,echo=F,warning=FALSE,fig.pos='H', global.device = TRUE)
a4width<- 8.3
a4height<- 11.7
options(knitr.table.format = "latex")
# Load the required packages
library(taxize)
library(ape)
library(phytools)
library(ade4)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidytree)
library(aplot)
library(cowplot)
library(ggpubr)
library(ggsci)
library(R.rsp)
library(flextable)
library(effectsize)
library(metafor)
library(esc)
library(knitr)
library(tidyverse)
library(brms)
library(coda)
library(modelr)
library(gridExtra)
library(pBrackets)
library(performance)
library(kableExtra)
library(tidybayes)
library(formattable)
library(grid)
library(rstan)
library(bayesplot)
library(stringr)
library(rgbif)
set.seed(13)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
sim_dat <- data.frame(
temperature = c(20, 22, 24, 26, 28, 30),
males = c(30, 35, 40, 50, 55, 60), # Male counts or other performance metric
females = c(70, 65, 60, 50, 45, 40), # Female counts or other performance metric
sd_males = c(5, 6, 5, 7, 6, 5),   # Standard deviation for males
sd_females = c(6, 5, 7, 5, 6, 7)  # Standard deviation for females
)
sim_dat
library(reshape2)
data_long <- melt(sim_dat, id.vars = "temperature", measure.vars = c("males", "females"),
variable.name = "Sex", value.name = "Count")
data_long
sim_demo1 <- data.frame(
temperature = c(20, 22, 24, 26, 28, 30),
males = c(30, 35, 40, 50, 55, 60), # Male counts or other performance metric
females = c(70, 65, 60, 50, 45, 40), # Female counts or other performance metric
sd_males = c(5, 6, 5, 7, 6, 5),   # Standard deviation for males
sd_females = c(6, 5, 7, 5, 6, 7)  # Standard deviation for females
)
sim_demo1_long <- melt(sim_demo1, id.vars = "temperature", measure.vars = c("males", "females"),
variable.name = "Sex", value.name = "Count")
sim_demo1_long$sd <- c(sim_demo1$sd_males, sim_demo1$sd_females) # Add standard deviation for error bars
sim_demo1_long
ggplot(data_long, aes(x = temperature, y = Count, color = Sex, group = Sex)) +
geom_point(size = 3) +                    # Scatter points
geom_line(size = 1) +                     # Line connecting points
geom_errorbar(aes(ymin = Count - sd, ymax = Count + sd), width = 0.5) +  # Error bars
labs(title = "Male and Female Response to Temperature",
x = "Temperature (°C)",
y = "Count",
color = "Sex") +
theme_minimal() +                          # Clean theme
scale_color_manual(values = c("blue", "red"))  # Custom colors for male/female
ggplot(sim_demo1_long, aes(x = temperature, y = Count, color = Sex, group = Sex)) +
geom_point(size = 3) +                    # Scatter points
geom_line(size = 1) +                     # Line connecting points
geom_errorbar(aes(ymin = Count - sd, ymax = Count + sd), width = 0.5) +  # Error bars
labs(title = "Male and Female Response to Temperature",
x = "Temperature (°C)",
y = "Count",
color = "Sex") +
theme_minimal() +                          # Clean theme
scale_color_manual(values = c("blue", "red"))  # Custom colors for male/female
ggplot(sim_demo1_long, aes(x = temperature, y = Count, color = Sex, group = Sex)) +
geom_point(size = 3) +                    # Scatter points
geom_line(size = 1) +                     # Line connecting points
geom_errorbar(aes(ymin = Count - sd, ymax = Count + sd), width = 0.5) +  # Error bars
labs(title = "Male and Female Response to Temperature",
x = "Temperature (°C)",
y = "Count",
color = "Sex") +
theme_minimal() +                          # Clean theme
scale_color_manual(values = c("blue", "pink"))  # Custom colors for male/female
ggplot(sim_demo1_long, aes(x = temperature, y = Count, color = Sex, group = Sex)) +
geom_point(size = 3) +                    # Scatter points
geom_line(size = 1) +                     # Line connecting points
geom_errorbar(aes(ymin = Count - sd, ymax = Count + sd), width = 0.5) +  # Error bars
labs(title = "Male and Female Response to Temperature",
x = "Temperature (°C)",
y = "Count",
color = "Sex") +
theme_minimal() +                          # Clean theme
scale_color_manual(values = c("blue", "red"))  # Custom colors for male/female
ggplot(sim_demo1_long, aes(x = temperature, y = Count, color = Sex, group = Sex)) +
geom_point(size = 3) +                    # Scatter points
geom_line(size = 1) +                     # Line connecting points
geom_errorbar(aes(ymin = Count - sd, ymax = Count + sd), width = 0.5) +  # Error bars
labs(title = "Male and Female Response to Temperature",
x = "Temperature (°C)",
y = "Count",
color = "Sex") +
theme_bw() +                          # Clean theme
scale_color_manual(values = c("blue", "red"))  # Custom colors for male/female
sim_demo1$sex_ratio <- sim_demo1$males / (sim_demo1$males + sim_demo1$females)
sexratio_demo <- data.frame(
temperature = c(20, 22, 24, 26, 28, 30),
males = c(30, 35, 40, 50, 55, 60), # Male counts or other performance metric
females = c(70, 65, 60, 50, 45, 40), # Female counts or other performance metric
sd_males = c(5, 6, 5, 7, 6, 5),   # Standard deviation for males
sd_females = c(6, 5, 7, 5, 6, 7)  # Standard deviation for females
)
sexratio_demo_long <- melt(sexratio_demo, id.vars = "temperature", measure.vars = c("males", "females"),
variable.name = "Sex", value.name = "Count") # Convert data to long format for ggplot
sexratio_demo_long$sd <- c(sexratio_demo$sd_males, sexratio_demo$sd_females) # Add standard deviation for error bars
sexratio_demo_long <- melt(sexratio_demo, id.vars = "temperature", measure.vars = c("males", "females"),
variable.name = "Sex", value.name = "Count") # Convert data to long format for ggplot
sexratio_demo_long$sd <- c(sexratio_demo$sd_males, sexratio_demo$sd_females) # Add standard deviation for error bars
ggplot(sexratio_demo_long, aes(x = temperature, y = Count, color = Sex, group = Sex)) +
geom_point(size = 3) +                    # Scatter points
geom_line(size = 1) +                     # Line connecting points
geom_errorbar(aes(ymin = Count - sd, ymax = Count + sd), width = 0.5) +  # Error bars
labs(title = "Male and Female Response to Temperature",
x = "Temperature (°C)",
y = "Count",
color = "Sex") +
theme_bw() +                          # Clean theme
scale_color_manual(values = c("blue", "red"))  # Custom colors for male/female
sexratio_demo_long$sex_ratio <- sexratio_demo_long$males / (sexratio_demo_long$males + sexratio_demo_long$females)
sexratio_demo_long
sexratio_demo
sexratio_demo$sex_ratio <- sexratio_demo$males / (sexratio_demo$males + sexratio_demo$females)
sexratio_demo
sexratio_demo$sd_sex_ratio <- sexratio_demo$sex_ratio * sqrt(
(sexratio_demo$sd_males^2 / sexratio_demo$males^2) +
(sexratio_demo$sd_females^2 / sexratio_demo$females^2)
)# Propagate error for sex ratio
sexratio_demo
ggplot(sexratio_demo, aes(x = temperature, y = sex_ratio)) +
geom_point(color = "blue", size = 3) +  # Scatter plot points
geom_line(color = "blue", size = 1) +   # Line connecting points
geom_errorbar(aes(ymin = sex_ratio - sd_sex_ratio, ymax = sex_ratio + sd_sex_ratio),
width = 0.5, color = "black") +  # Error bars
labs(title = "Sex Ratio as a Function of Temperature",
x = "Temperature (°C)",
y = "Sex Ratio (Males / Total)") +
theme_minimal() +  # Clean theme
ylim(0, 1)  # Ensure sex ratio stays within valid range
ggplot(sexratio_demo, aes(x = temperature, y = sex_ratio)) +
geom_point(color = "blue", size = 3) +  # Scatter plot points
geom_line(color = "blue", size = 1) +   # Line connecting points
geom_errorbar(aes(ymin = sex_ratio - sd_sex_ratio, ymax = sex_ratio + sd_sex_ratio),
width = 0.5, color = "black") +  # Error bars
labs(title = "Sex Ratio as a Function of Temperature",
x = "Temperature (°C)",
y = "Sex Ratio (Males / Total)") +
theme_bw() +  # Clean theme
ylim(0, 1)  # Ensure sex ratio stays within valid range
ggplot(sexratio_demo, aes(x = temperature, y = sex_ratio)) +
geom_point(color = "black", size = 3) +  # Scatter plot points
geom_line(color = "black", size = 1) +   # Line connecting points
geom_errorbar(aes(ymin = sex_ratio - sd_sex_ratio, ymax = sex_ratio + sd_sex_ratio),
width = 0.5, color = "black") +  # Error bars
labs(title = "Sex Ratio as a Function of Temperature",
x = "Temperature (°C)",
y = "Sex Ratio (Males / Total)") +
theme_bw() +  # Clean theme
ylim(0, 1)  # Ensure sex ratio stays within valid range
ggplot(sexratio_demo, aes(x = temperature, y = sex_ratio)) +
geom_point(color = "black", size = 3) +  # Scatter plot points
geom_line(color = "black", size = 1) +   # Line connecting points
geom_errorbar(aes(ymin = sex_ratio - sd_sex_ratio, ymax = sex_ratio + sd_sex_ratio),
width = 0.5, color = "black") +  # Error bars
labs(
x = "Temperature (°C)",
y = "Sex Ratio (Males / Total)") +
theme_bw() +  # Clean theme
ylim(0, 1)  # Ensure sex ratio stays within valid range
ggplot(sexratio_demo_long, aes(x = temperature, y = Count, color = Sex, group = Sex)) +
geom_point(size = 3) +                    # Scatter points
geom_line(size = 1) +                     # Line connecting points
geom_errorbar(aes(ymin = Count - sd, ymax = Count + sd), width = 0.5) +  # Error bars
labs(
x = "Temperature (°C)",
y = "Count",
color = "Sex") +
theme_bw() +                          # Clean theme
scale_color_manual(values = c("blue", "red"))  # Custom colors for male/female
sexratio_demo_long
mod <- lm(sex_ratio ~ temperature, data = sexratio_demo)
summary(mod) # slope of this model represents the rate of change of sex ratio per degree Celsius.
# Extract slope and standard error
slope <- coef(mod)[2]  # Regression slope (change in sex ratio per °C)
se_slope <- summary(mod)$coefficients[2, 2]  # Standard error of the slope
slope
se_slope
# Convert slope to Fisher’s Z
zr <- atanh(slope)  # Fisher’s Z transformation
vz <- 1 / (length(data$temperature) - 3)  # Variance of Zr
print(c(Fisher_Z = zr, Variance = vz))
vz <- 1 / (length(sexratio_demo$temperature) - 3)  # Variance of Zr
print(c(Fisher_Z = zr, Variance = vz))
slope_data <- data.frame(
slope = c(0.02, 0.03, 0.01, 0.025, 0.015),  # Slopes from different studies
se = c(0.005, 0.007, 0.004, 0.006, 0.005)   # Standard errors of the slopes
)
# Convert slopes to Fisher's Z
slope_sexratio_demo$zr <- atanh(slope_data$slope)
slope_sexratio_demo$vz <- slope_data$se^2
sexratio_demo
print(c(Fisher_Z = zr, Variance = vz))
sexratio_demo
rm(list=ls(all=T)) # Clears R's short term memory
