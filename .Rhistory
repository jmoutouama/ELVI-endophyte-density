iter = 4000,
thin = 2,
chains = 4
)
fit_allsites_surv_aghy_ppt <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/elvi_survival.stan",
data = data_sites_surv_aghy_ppt,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
remove.packages("rstan")
remove.packages("StanHeaders")
install.packages(c(“StanHeaders”,“rstan”),type=“source”)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library("rstan") # observe startup messages
library(stan)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
# Project:
# Purpose: Fit vital rate models to test the effect of grass-endophyte symbiosis and endophyte hyphal density on  vital rate models (survival, growth, flowering,fertility).
# Note: Raster files are too large to provide in public repository. They are stored on a local machine
# Authors: Jacob Moutouama
# Date last modified (Y-M-D):
rm(list = ls())
# load packages
#remove.packages(c("StanHeaders", "rstan"))
#install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
#library(countreg)
library(rmutil)
library(actuar)
#library(SPEI)
library(LaplacesDemon)
library(ggpubr)
library(raster)
#library(rgdal)
library(readxl)
library(ggsci)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("scater")
# library(scater)
library(BiocManager)
library(swfscMisc)
# Define some basic functions that we'll use later
quote_bare <- function( ... ){
substitute( alist(...) ) %>%
eval( ) %>%
sapply(deparse )
}
invlogit<-function(x){exp(x)/(1+exp(x))}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
datini<-read.csv("https://www.dropbox.com/scl/fi/exwmw8z8vp1qkf8inyeoq/Initialdata.csv?rlkey=kez08s92dgh9v0i08269kx1iq&dl=1", stringsAsFactors = F)
dat23<-read.csv("https://www.dropbox.com/scl/fi/9ob0vpu2xdq8x7u48866s/census2023.csv?rlkey=i2loj3fezymq1p41bo5lsj3uj&dl=1", stringsAsFactors = F)
dat24<-read.csv("https://www.dropbox.com/scl/fi/s8pnf1j7c85g6jwc944vw/census2024.csv?rlkey=kwt2x8k16q4w7gndm42komj6o&dl=1", stringsAsFactors = F)
datherbivory<-read.csv("https://www.dropbox.com/scl/fi/suy4twdhy36el0k7ytqsi/herbivory.csv?rlkey=hs4xbjn1zrpnpitry30ng538d&dl=1", stringsAsFactors = F)
# unique(datini$Site)
# unique(datini$dat23)
# unique(datini$dat24)
# names(dat23
# unique(datini$Site)
# unique(datini$dat23)
# unique(datini$dat24)
# names(dat23)
# calculate the total spikelet for each census
dat23 %>%
mutate(spikelet_23=round(rowMeans(across(Spikelet_A:Spikelet_C),na.rm=T)),digit=0)->dat23_spike
dat24 %>%
mutate(spikelet_24=round(rowMeans(across(Spikelet_A:Spikelet_C),na.rm=T),digit=0),Inf_24=round(rowMeans(across(attachedInf_24:brokenInf_24),na.rm=T),digit=0))->dat24_spike
## Merge the initial data with the 23 data and the 23 data with the 24 -----
datini23 <- left_join(x = datini,y =dat23_spike,by=c("Tag_ID"))
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages("rstan")
remove.packages("StanHeaders")
library(rstan)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4")
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
install.packages("remotes")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
library(StanHeaders)
install.packages("rstan")
library(rstan)
# Project:
# Purpose: Fit vital rate models to test the effect of grass-endophyte symbiosis and endophyte hyphal density on  vital rate models (survival, growth, flowering,fertility).
# Note: Raster files are too large to provide in public repository. They are stored on a local machine
# Authors: Jacob Moutouama
# Date last modified (Y-M-D):
rm(list = ls())
# load packages
#remove.packages(c("StanHeaders", "rstan"))
#install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
#library(countreg)
library(rmutil)
library(actuar)
#library(SPEI)
library(LaplacesDemon)
library(ggpubr)
library(raster)
#library(rgdal)
library(readxl)
library(ggsci)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("scater")
# library(scater)
library(BiocManager)
library(swfscMisc)
# Define some basic functions that we'll use later
quote_bare <- function( ... ){
substitute( alist(...) ) %>%
eval( ) %>%
sapply(deparse )
}
invlogit<-function(x){exp(x)/(1+exp(x))}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Demographic data -----
# Merge the demographic census
datini<-read.csv("https://www.dropbox.com/scl/fi/exwmw8z8vp1qkf8inyeoq/Initialdata.csv?rlkey=kez08s92dgh9v0i08269kx1iq&dl=1", stringsAsFactors = F)
dat23<-read.csv("https://www.dropbox.com/scl/fi/9ob0vpu2xdq8x7u48866s/census2023.csv?rlkey=i2loj3fezymq1p41bo5lsj3uj&dl=1", stringsAsFactors = F)
dat24<-read.csv("https://www.dropbox.com/scl/fi/s8pnf1j7c85g6jwc944vw/census2024.csv?rlkey=kwt2x8k16q4w7gndm42komj6o&dl=1", stringsAsFactors = F)
datherbivory<-read.csv("https://www.dropbox.com/scl/fi/suy4twdhy36el0k7ytqsi/herbivory.csv?rlkey=hs4xbjn1zrpnpitry30ng538d&dl=1", stringsAsFactors = F)
# unique(datini$Site)
# unique(datini$dat23)
# unique(datini$dat24)
# names(dat23)
# calculate the total spikelet for each census
dat23 %>%
mutate(spikelet_23=round(rowMeans(across(Spikelet_A:Spikelet_C),na.rm=T)),digit=0)->dat23_spike
dat24 %>%
mutate(spikelet_24=round(rowMeans(across(Spikelet_A:Spikelet_C),na.rm=T),digit=0),Inf_24=round(rowMeans(across(attachedInf_24:brokenInf_24),na.rm=T),digit=0))->dat24_spike
## Merge the initial data with the 23 data and the 23 data with the 24 -----
datini23 <- left_join(x = datini,y =dat23_spike,by=c("Tag_ID"))
names(datini23)
dat2324 <- left_join(x = datini23 ,y =dat24_spike,by=c("Tag_ID"))
names(dat2324)
dat2324 %>%
mutate(tiller_t=Tiller_23,
tiller_t1=Tiller_24,
inf_t=Inf_23,
inf_t1=Inf_24,
spikelet_t=spikelet_23,
spikelet_t1=spikelet_24,
tiller_Herb_t=tiller_Herb,
tiller_Herb_t1=tiller_herb_24) %>%
dplyr::select(Site,
Species,
Plot,
Position,
Tag_ID,
Population,
Clone,
GreenhouseID,
Endo,
tiller_t,
tiller_t1,
inf_t,
inf_t1,
spikelet_t,
spikelet_t1,
tiller_Herb_t,
tiller_Herb_t1,
date_23,
date_24)->dat2324_t_t1
## Merge the demographic data with the herbivory data -----
dat2324_t_t1_herb<-left_join(x=dat2324_t_t1,y=datherbivory,by=c("Site","Plot","Species"))# Merge the demographic data with the herbivory data
head(dat2324_t_t1_herb)
unique(dat2324_t_t1_herb$Species)
#view(dat2324_t_t1_herb)
# Climatic data ----
climate_summary<-readRDS(url("https://www.dropbox.com/scl/fi/z7a57xv1ago4erqrnp0tx/prism_means.rds?rlkey=z0ddxpr7ls4k0x527k5pp2wsx&dl=1"))
climate_summary %>%
rename(Site=site)->climate_site
distance_species<-readRDS(url("https://www.dropbox.com/scl/fi/kv9j0n2pbiqgrfnm5a4wn/distance_species.rds?rlkey=vni9e8tjw9enwki0mwgnllzjc&dl=1"))
distance_species %>%
rename(Site=site_code)->distance_species_clean
## Merge the demographic data with the climatic data -----
demography_climate<-left_join(x=dat2324_t_t1_herb,y=climate_site,by=c("Site"))
demography_climate_distance<-left_join(x=demography_climate,y=distance_species_clean,by=c("Site","Species"))
## Create new variables
demography_climate_distance$surv1<-1*(!is.na(demography_climate_distance$tiller_t) & !is.na(demography_climate_distance$tiller_t1))
demography_climate_distance$site_plot<-interaction(demography_climate_distance$Site,demography_climate_distance$Plot)
demography_climate_distance$grow<-(log(demography_climate_distance$tiller_t1+1) - log(demography_climate_distance$tiller_t+1))# Relative growth rate
# names(demography_climate)
# view(demography_climate)
#summary(demography_climate)
hist(demography_climate_distance$grow,main="")
# Agrostis hyemalis ----
demography_climate_distance %>%
filter(Species=="AGHY")->demography_aghy
## Survival----
## Read and format survival data to build the model
demography_aghy %>%
subset( tiller_t > 0 )%>%
dplyr::select(Population, Site, Plot,site_plot, Endo, Herbivory,
tiller_t, surv1,mean_ppt,mean_pet,mean_spei,distance)%>%
na.omit %>%
mutate( Site= Site %>% as.factor %>% as.numeric,
Plot = Plot %>% as.factor %>% as.numeric,
site_plot=site_plot %>% as.factor %>% as.numeric,
Endo = Endo %>% as.factor %>% as.numeric,
Herbivory=Herbivory %>% as.factor %>% as.numeric,
Population = Population %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0 = log(tiller_t),
surv_t1=surv1,
ppt = log(mean_ppt),
pet = log(mean_pet),
spei = mean_spei,
distance = log(distance))->demography_aghy_surv
## Separate each variable to use the same model stan
data_sites_surv_aghy_ppt <- list( n_sites    = demography_aghy_surv$Site %>% n_distinct,
n_pops  = demography_aghy_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_aghy_surv$Plot %>% n_distinct,
site_s   = demography_aghy_surv$Site,
pop_s =  demography_aghy_surv$Population,
plot_s  = demography_aghy_surv$Plot,
clim_s=as.vector(demography_aghy_surv$ppt),
endo_s  = demography_aghy_surv$Endo-1,
herb_s  = demography_aghy_surv$Herbivory-1,
size_s   = demography_aghy_surv$log_size_t0,
y_s      = demography_aghy_surv$surv_t1,
n_s      = nrow(demography_aghy_surv))
data_sites_surv_aghy_ppt
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 2,
chains = 4
)
fit_allsites_surv_aghy_ppt <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/elvi_survival.stan",
data = data_sites_surv_aghy_ppt,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
remove.packages("rstan")
remove.packages("StanHeaders")
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# Project:
# Purpose: Fit vital rate models to test the effect of grass-endophyte symbiosis and endophyte hyphal density on  vital rate models (survival, growth, flowering,fertility).
# Note: Raster files are too large to provide in public repository. They are stored on a local machine
# Authors: Jacob Moutouama
# Date last modified (Y-M-D):
rm(list = ls())
# load packages
#remove.packages(c("StanHeaders", "rstan"))
#install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
#library(countreg)
library(rmutil)
library(actuar)
#library(SPEI)
library(LaplacesDemon)
library(ggpubr)
library(raster)
#library(rgdal)
library(readxl)
library(ggsci)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("scater")
# library(scater)
library(BiocManager)
library(swfscMisc)
# Define some basic functions that we'll use later
quote_bare <- function( ... ){
substitute( alist(...) ) %>%
eval( ) %>%
sapply(deparse )
}
invlogit<-function(x){exp(x)/(1+exp(x))}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# Demographic data -----
# Merge the demographic census
datini<-read.csv("https://www.dropbox.com/scl/fi/exwmw8z8vp1qkf8inyeoq/Initialdata.csv?rlkey=kez08s92dgh9v0i08269kx1iq&dl=1", stringsAsFactors = F)
dat23<-read.csv("https://www.dropbox.com/scl/fi/9ob0vpu2xdq8x7u48866s/census2023.csv?rlkey=i2loj3fezymq1p41bo5lsj3uj&dl=1", stringsAsFactors = F)
dat24<-read.csv("https://www.dropbox.com/scl/fi/s8pnf1j7c85g6jwc944vw/census2024.csv?rlkey=kwt2x8k16q4w7gndm42komj6o&dl=1", stringsAsFactors = F)
datherbivory<-read.csv("https://www.dropbox.com/scl/fi/suy4twdhy36el0k7ytqsi/herbivory.csv?rlkey=hs4xbjn1zrpnpitry30ng538d&dl=1", stringsAsFactors = F)
dat23 %>%
mutate(spikelet_23=round(rowMeans(across(Spikelet_A:Spikelet_C),na.rm=T)),digit=0)->dat23_spike
dat24 %>%
mutate(spikelet_24=round(rowMeans(across(Spikelet_A:Spikelet_C),na.rm=T),digit=0),Inf_24=round(rowMeans(across(attachedInf_24:brokenInf_24),na.rm=T),digit=0))->dat24_spike
## Merge the initial data with the 23 data and the 23 data with the 24 -----
datini23 <- left_join(x = datini,y =dat23_spike,by=c("Tag_ID"))
names(datini23)
dat2324 <- left_join(x = datini23 ,y =dat24_spike,by=c("Tag_ID"))
names(dat2324)
dat2324 %>%
mutate(tiller_t=Tiller_23,
tiller_t1=Tiller_24,
inf_t=Inf_23,
inf_t1=Inf_24,
spikelet_t=spikelet_23,
spikelet_t1=spikelet_24,
tiller_Herb_t=tiller_Herb,
tiller_Herb_t1=tiller_herb_24) %>%
dplyr::select(Site,
Species,
Plot,
Position,
Tag_ID,
Population,
Clone,
GreenhouseID,
Endo,
tiller_t,
tiller_t1,
inf_t,
inf_t1,
spikelet_t,
spikelet_t1,
tiller_Herb_t,
tiller_Herb_t1,
date_23,
date_24)->dat2324_t_t1
## Merge the demographic data with the herbivory data -----
dat2324_t_t1_herb<-left_join(x=dat2324_t_t1,y=datherbivory,by=c("Site","Plot","Species"))# Merge the demographic data with the herbivory data
head(dat2324_t_t1_herb)
unique(dat2324_t_t1_herb$Species)
#view(dat2324_t_t1_herb)
# Climatic data ----
climate_summary<-readRDS(url("https://www.dropbox.com/scl/fi/z7a57xv1ago4erqrnp0tx/prism_means.rds?rlkey=z0ddxpr7ls4k0x527k5pp2wsx&dl=1"))
climate_summary %>%
rename(Site=site)->climate_site
distance_species<-readRDS(url("https://www.dropbox.com/scl/fi/kv9j0n2pbiqgrfnm5a4wn/distance_species.rds?rlkey=vni9e8tjw9enwki0mwgnllzjc&dl=1"))
distance_species %>%
rename(Site=site_code)->distance_species_clean
## Merge the demographic data with the climatic data -----
demography_climate<-left_join(x=dat2324_t_t1_herb,y=climate_site,by=c("Site"))
demography_climate_distance<-left_join(x=demography_climate,y=distance_species_clean,by=c("Site","Species"))
## Create new variables
demography_climate_distance$surv1<-1*(!is.na(demography_climate_distance$tiller_t) & !is.na(demography_climate_distance$tiller_t1))
demography_climate_distance$site_plot<-interaction(demography_climate_distance$Site,demography_climate_distance$Plot)
demography_climate_distance$grow<-(log(demography_climate_distance$tiller_t1+1) - log(demography_climate_distance$tiller_t+1))# Relative growth rate
# names(demography_climate)
# view(demography_climate)
#summary(demography_climate)
hist(demography_climate_distance$grow,main="")
# Agrostis hyemalis ----
demography_climate_distance %>%
filter(Species=="AGHY")->demography_aghy
## Survival----
## Read and format survival data to build the model
demography_aghy %>%
subset( tiller_t > 0 )%>%
dplyr::select(Population, Site, Plot,site_plot, Endo, Herbivory,
tiller_t, surv1,mean_ppt,mean_pet,mean_spei,distance)%>%
na.omit %>%
mutate( Site= Site %>% as.factor %>% as.numeric,
Plot = Plot %>% as.factor %>% as.numeric,
site_plot=site_plot %>% as.factor %>% as.numeric,
Endo = Endo %>% as.factor %>% as.numeric,
Herbivory=Herbivory %>% as.factor %>% as.numeric,
Population = Population %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0 = log(tiller_t),
surv_t1=surv1,
ppt = log(mean_ppt),
pet = log(mean_pet),
spei = mean_spei,
distance = log(distance))->demography_aghy_surv
## Separate each variable to use the same model stan
data_sites_surv_aghy_ppt <- list( n_sites    = demography_aghy_surv$Site %>% n_distinct,
n_pops  = demography_aghy_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_aghy_surv$Plot %>% n_distinct,
site_s   = demography_aghy_surv$Site,
pop_s =  demography_aghy_surv$Population,
plot_s  = demography_aghy_surv$Plot,
clim_s=as.vector(demography_aghy_surv$ppt),
endo_s  = demography_aghy_surv$Endo-1,
herb_s  = demography_aghy_surv$Herbivory-1,
size_s   = demography_aghy_surv$log_size_t0,
y_s      = demography_aghy_surv$surv_t1,
n_s      = nrow(demography_aghy_surv))
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 2,
chains = 4
)
fit_allsites_surv_aghy_ppt <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/elvi_survival.stan",
data = data_sites_surv_aghy_ppt,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
