# Standardize species names in the dataset
# Standardize species names in the dataset
dat_meta <- dat_meta %>%
dplyr::select(-Notes,-Authors) %>%
mutate(Species = case_when(
Species == 'Apistogramma "Breitbinden" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Gelbwangen" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Orangeschwanz" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Puerto Narino" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Rio Branco" sp.' ~ 'Apistogramma hongsloi',
Species == 'Apistogramma "Rotpunkt" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Smaragd" sp.' ~ 'Apistogramma agassizii',
TRUE ~ Species  # Keep other species unchanged
)) %>%
drop_na(Species)  # Remove rows with missing species
dat_meta
rm(list = ls(all=TRUE))
# Load necessary packages
library(tidyverse)         # For data manipulation and visualization
library(rgbif)             # For accessing the GBIF database
library(reshape2)          # For data reshaping
library(googlesheets4)     # For importing data from Google Sheets
# Set random seed for reproducibility
set.seed(13)
# Import species metadata from the provided Google Sheets URL
# sheet_url <- "https://docs.google.com/spreadsheets/d/1on1_JwOsKHVWPXCYFoNbPiKfdm2lNIMMDM_44EGSFdg/edit?gid=0#gid=0"
# dat_meta <- read_sheet(sheet_url)  # Import the data
# names(dat_meta)  # Check column names for reference
dat_meta <- read.csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/DataEntry_Meta_Analysis.csv", header = T)
# Standardize species names in the dataset
dat_meta <- dat_meta %>%
dplyr::select(-Title,-Notes,-Authors) %>%
mutate(Species = case_when(
Species == 'Apistogramma "Breitbinden" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Gelbwangen" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Orangeschwanz" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Puerto Narino" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Rio Branco" sp.' ~ 'Apistogramma hongsloi',
Species == 'Apistogramma "Rotpunkt" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Smaragd" sp.' ~ 'Apistogramma agassizii',
TRUE ~ Species  # Keep other species unchanged
)) %>%
drop_na(Species)  # Remove rows with missing species
dat_meta
rm(list = ls(all=TRUE))
# Load necessary packages
library(tidyverse)         # For data manipulation and visualization
library(rgbif)             # For accessing the GBIF database
library(reshape2)          # For data reshaping
library(googlesheets4)     # For importing data from Google Sheets
# Set random seed for reproducibility
set.seed(13)
# Import species metadata from the provided Google Sheets URL
# sheet_url <- "https://docs.google.com/spreadsheets/d/1on1_JwOsKHVWPXCYFoNbPiKfdm2lNIMMDM_44EGSFdg/edit?gid=0#gid=0"
# dat_meta <- read_sheet(sheet_url)  # Import the data
# names(dat_meta)  # Check column names for reference
dat_meta <- read.csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/DataEntry_Meta_Analysis.csv", header = T)
# Standardize species names in the dataset
dat_meta <- dat_meta %>%
dplyr::select(-c(Notes, Authors,Publisher)) %>%
mutate(Species = case_when(
Species == 'Apistogramma "Breitbinden" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Gelbwangen" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Orangeschwanz" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Puerto Narino" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Rio Branco" sp.' ~ 'Apistogramma hongsloi',
Species == 'Apistogramma "Rotpunkt" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Smaragd" sp.' ~ 'Apistogramma agassizii',
TRUE ~ Species  # Keep other species unchanged
)) %>%
drop_na(Species)  # Remove rows with missing species
dat_meta
rm(list = ls(all=TRUE))
# Load necessary packages
library(tidyverse)         # For data manipulation and visualization
library(rgbif)             # For accessing the GBIF database
library(reshape2)          # For data reshaping
library(googlesheets4)     # For importing data from Google Sheets
# Set random seed for reproducibility
set.seed(13)
# Import species metadata from the provided Google Sheets URL
# sheet_url <- "https://docs.google.com/spreadsheets/d/1on1_JwOsKHVWPXCYFoNbPiKfdm2lNIMMDM_44EGSFdg/edit?gid=0#gid=0"
# dat_meta <- read_sheet(sheet_url)  # Import the data
# names(dat_meta)  # Check column names for reference
dat_meta <- read.csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/DataEntry_Meta_Analysis.csv", header = T)
# Standardize species names in the dataset
dat_meta <- dat_meta %>%
dplyr::select(-c(Title,Notes, Authors,Publisher)) %>%
mutate(Species = case_when(
Species == 'Apistogramma "Breitbinden" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Gelbwangen" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Orangeschwanz" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Puerto Narino" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Rio Branco" sp.' ~ 'Apistogramma hongsloi',
Species == 'Apistogramma "Rotpunkt" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Smaragd" sp.' ~ 'Apistogramma agassizii',
TRUE ~ Species  # Keep other species unchanged
)) %>%
drop_na(Species)  # Remove rows with missing species
dat_meta
# Get the unique species present in the dataset
sp.meta <- unique(dat_meta$Species)
sp.meta
rm(list = ls(all=TRUE))
# Load necessary packages
library(tidyverse)         # For data manipulation and visualization
library(rgbif)             # For accessing the GBIF database
library(reshape2)          # For data reshaping
library(googlesheets4)     # For importing data from Google Sheets
# Set random seed for reproducibility
set.seed(13)
dat_meta %>%
dplyr::select(-c(Title,Notes, Authors,Publisher)) %>%
mutate(Species = case_when(
Species == 'Apistogramma "Breitbinden" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Gelbwangen" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Orangeschwanz" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Puerto Narino" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Rio Branco" sp.' ~ 'Apistogramma hongsloi',
Species == 'Apistogramma "Rotpunkt" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Smaragd" sp.' ~ 'Apistogramma agassizii',
TRUE ~ Species  # Keep other species unchanged
))
dat_meta %>%
dplyr::select(-c(Title,Notes, Authors,Publisher)) %>%
mutate(Species = case_when(
Species == 'Apistogramma "Breitbinden" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Gelbwangen" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Orangeschwanz" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Puerto Narino" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Rio Branco" sp.' ~ 'Apistogramma hongsloi',
Species == 'Apistogramma "Rotpunkt" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Smaragd" sp.' ~ 'Apistogramma agassizii',
TRUE ~ Species  # Keep other species unchanged
))
# Remove all objects from the workspace to ensure a clean environment
rm(list = ls(all=TRUE))
library(tidyverse)         # For data manipulation and visualization
library(rgbif)             # For accessing the GBIF database
library(reshape2)          # For data reshaping
library(googlesheets4)     # For importing data from Google Sheets
# Set random seed for reproducibility
set.seed(13)
# Import species metadata from the provided Google Sheets URL
# sheet_url <- "https://docs.google.com/spreadsheets/d/1on1_JwOsKHVWPXCYFoNbPiKfdm2lNIMMDM_44EGSFdg/edit?gid=0#gid=0"
# dat_meta <- read_sheet(sheet_url)  # Import the data
# names(dat_meta)  # Check column names for reference
dat_meta <- read.csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/DataEntry_Meta_Analysis.csv", header = T)
# Standardize species names in the dataset
dat_meta <- dat_meta %>%
dplyr::select(-c(Title, Notes, Authors,Publisher)) %>%
mutate(Species = case_when(
Species == 'Apistogramma "Breitbinden" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Gelbwangen" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Orangeschwanz" sp.' ~ 'Apistogramma cacatuoides',
Species == 'Apistogramma "Puerto Narino" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Rio Branco" sp.' ~ 'Apistogramma hongsloi',
Species == 'Apistogramma "Rotpunkt" sp.' ~ 'Apistogramma agassizii',
Species == 'Apistogramma "Smaragd" sp.' ~ 'Apistogramma agassizii',
TRUE ~ Species  # Keep other species unchanged
)) %>%
drop_na(Species)  # Remove rows with missing species
dat_meta
# Get the unique species present in the dataset
sp.meta <- unique(dat_meta$Species)
sp.meta
# Retrieve kingdom information for each species using GBIF
sp.meta_kingdom <- name_backbone_checklist(name_data = sp.meta)
sp.meta_kingdom <- data.frame(Species = sp.meta, Kingdom = sp.meta_kingdom$kingdom)
# Join the kingdom information with the original species metadata
dat_meta_kg <- left_join(x = dat_meta, y = sp.meta_kingdom, by = "Species")
dat_meta_kg
# Filter the data to keep only plant species (Kingdom == "Plantae")
dat_meta_kg %>%
filter(Kingdom == "Plantae") -> dat_plant
dat_plant
write_csv(dat_plant, "/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv")
rm(list=ls(all=T)) # Clears R's short term memory
# Load the required packages
library(tidyverse)
set.seed(13)
dat_plant <- read_csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv", show_col_types = FALSE)
dat_plant
view(dat_plant)
names(dat_plant)
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,
Xm, N_m, SE_m, SD_m,
Env_treatment, Response_var, Env_var_type, Env_Units
) %>%
filter(!is.na(Xf), !is.na(Xm))
dat_plant_MF
view(dat_plant_MF)
rm(list=ls(all=T)) # Clears R's short term memory
# Load the required packages
library(tidyverse)
set.seed(13)
dat_plant <- read_csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv", show_col_types = FALSE)
view(dat_plant)
names(dat_plant)
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,
Xm, N_m, SE_m, SD_m,
Env_treatment, Response_var, Env_var_type, Env_Units
) %>%
filter(!is.na(Xf), !is.na(Xm),!is.na(as.numeric(Env_treatment)))
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,
Xm, N_m, SE_m, SD_m,
Env_treatment, Response_var, Env_var_type, Env_Units
) %>%
filter(!is.na(Xf), !is.na(Xm),!is.na(parse_number(Env_treatment)))
rm(list=ls(all=T)) # Clears R's short term memory
# Load the required packages
library(tidyverse)
set.seed(13)
dat_plant <- read_csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv", show_col_types = FALSE)
view(dat_plant)
names(dat_plant)
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,
Xm, N_m, SE_m, SD_m,
Env_treatment, Response_var, Env_var_type, Env_Units
) %>%
mutate(Env_treatment_num = parse_number(Env_treatment)) %>%
filter(!is.na(Xf), !is.na(Xm),!is.na(Env_treatment_num))
view(dat_plant_MF)
rm(list=ls(all=T)) # Clears R's short term memory
# Load the required packages
library(tidyverse)
set.seed(13)
dat_plant <- read_csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv", show_col_types = FALSE)
view(dat_plant)
names(dat_plant)
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,
Xm, N_m, SE_m, SD_m,
Env_treatment, Response_var, Env_var_type, Env_Units
) %>%
mutate(Env_treatment_num = suppressWarnings(parse_number(Env_treatment))) %>%
filter(!is.na(Xf), !is.na(Xm),!is.na(Env_treatment_num))
view(dat_plant_MF)
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
mutate(
Sex_Ratio = (Xf/(Xf+Xm))
)
data_sex_ratio
view(data_sex_ratio)
# Calculate the correlation coefficient for scaled Sex_Ratio and Env_treatment, and sum of X_f and X_m as sample size
r_sex_ratio <- data_sex_ratio %>%
group_by(Study_ID, Species, Response_var) %>%
summarise(
# Scale the variables and calculate the correlation between scaled Sex_Ratio and Env_treatment
Correlation_Coeff = cor(scale(Sex_Ratio), scale(Env_treatment)),  # Scale before calculating correlation
Sample_Size = n(),  # Sum of X_f and X_m as the new sample size
Sex_Ratio_SD = sd(Sex_Ratio),  # Standard deviation of Sex_Ratio
.groups = "drop"  # Drop the grouping after summarizing
) %>%
select(Study_ID, Species, Response_var, Correlation_Coeff, Zr, Var_Zr, Sex_Ratio_SE,Sample_Size,Env_treatment)  # Select the columns to keep
unique(data_sex_ratio$Response_var)
# Calculate the correlation coefficient for scaled Sex_Ratio and Env_treatment, and sum of X_f and X_m as sample size
r_sex_ratio <- data_sex_ratio %>%
group_by(Study_ID, Species, Response_var) %>%
summarise(
# Scale the variables and calculate the correlation between scaled Sex_Ratio and Env_treatment
Correlation_Coeff = cor(scale(Sex_Ratio), scale(Env_treatment)),  # Scale before calculating correlation
Sample_Size = n(),  # Sum of X_f and X_m as the new sample size
Sex_Ratio_SD = sd(Sex_Ratio),  # Standard deviation of Sex_Ratio
.groups = "drop"  # Drop the grouping after summarizing
) %>%
select(Study_ID, Species, Response_var, Correlation_Coeff, Zr, Var_Zr, Sex_Ratio_SE,Sample_Size)  # Select the columns to keep
# Calculate the correlation coefficient for scaled Sex_Ratio and Env_treatment, and sum of X_f and X_m as sample size
r_sex_ratio <- data_sex_ratio %>%
group_by(Study_ID, Species, Response_var) %>%
summarise(
Correlation_Coeff = cor(scale(Sex_Ratio), scale(Env_treatment), use = "complete.obs"),
Sample_Size = n(),
Sex_Ratio_SD = sd(Sex_Ratio, na.rm = TRUE),
.groups = "drop"
)
str(data_sex_ratio)
rm(list=ls(all=T)) # Clears R's short term memory
# Load the required packages
library(tidyverse)
set.seed(13)
dat_plant <- read_csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv", show_col_types = FALSE)
view(dat_plant)
names(dat_plant)
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,
Xm, N_m, SE_m, SD_m,
Env_treatment, Response_var, Env_var_type, Env_Units
) %>%
mutate(Env_treatment_num = suppressWarnings(parse_number(Env_treatment))) %>%
filter(!is.na(Xf), !is.na(Xm),!is.na(Env_treatment_num))
view(dat_plant_MF)
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
mutate(
Sex_Ratio = (Xf/(Xf+Xm),
dat_plant_MF
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
))))
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
mutate(
Sex_Ratio = Xf / (Xf + Xm),  # Properly close the parentheses
Env_treatment = as.numeric(as.character(Env_treatment))  # Convert Env_treatment to numeric
)
rm(list=ls(all=T)) # Clears R's short term memory
# Load the required packages
library(tidyverse)
set.seed(13)
dat_plant <- read_csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv", show_col_types = FALSE)
view(dat_plant)
#view(dat_plant)
names(dat_plant)
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,
Xm, N_m, SE_m, SD_m,
Env_treatment, Response_var, Env_var_type, Env_Units
) %>%
mutate(Env_treatment_num = suppressWarnings(parse_number(Env_treatment))) %>%
filter(!is.na(Xf), !is.na(Xm),!is.na(Env_treatment_num))
view(dat_plant_MF)
#view(dat_plant_MF)
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
mutate(
Sex_Ratio = Xf / (Xf + Xm),  # Properly close the parentheses
Env_treatment = as.numeric(as.character(Env_treatment))  # Convert Env_treatment to numeric
)
unique(dat_plant_MF$Env_treatment_num)
str(dat_plant_MF$Env_treatment_num)
str(dat_plant_MF)
rm(list=ls(all=T)) # Clears R's short term memory
# Load the required packages
library(tidyverse)
set.seed(13)
dat_plant <- read_csv("/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv", show_col_types = FALSE)
#view(dat_plant)
names(dat_plant)
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,
Xm, N_m, SE_m, SD_m,
Env_treatment, Response_var, Env_var_type, Env_Units
) %>%
mutate(Env_treatment_num = suppressWarnings(parse_number(Env_treatment))) %>%
filter(!is.na(Xf), !is.na(Xm),!is.na(Env_treatment_num))
str(dat_plant_MF)
#view(dat_plant_MF)
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
mutate(
Sex_Ratio = Xf / (Xf + Xm)  # Properly close the parentheses
# Env_treatment = as.numeric(as.character(Env_treatment))  # Convert Env_treatment to numeric
)
view(data_sex_ratio)
view(data_sex_ratio)
# Calculate the correlation coefficient for scaled Sex_Ratio and Env_treatment, and sum of X_f and X_m as sample size
r_sex_ratio <- data_sex_ratio %>%
group_by(Study_ID, Species, Response_var) %>%
summarise(
Correlation_Coeff = cor(scale(Sex_Ratio), scale(Env_treatment), use = "complete.obs"),
Sample_Size = n(),
Sex_Ratio_SD = sd(Sex_Ratio, na.rm = TRUE),
.groups = "drop"
)
str(data_sex_ratio)
#view(dat_plant_MF)
# Compute the sex ratio (X_f / X_m), using the absolute value of X_f and X_m
data_sex_ratio <- dat_plant_MF %>%
mutate(
Sex_Ratio = Xf / (Xf + Xm)  # proportion of female
)
view(data_sex_ratio)
# Calculate the correlation coefficient for scaled Sex_Ratio and Env_treatment, and sum of X_f and X_m as sample size
r_sex_ratio <- data_sex_ratio %>%
group_by(Study_ID, Species, Response_var) %>%
summarise(
Correlation_Coeff = cor(scale(Sex_Ratio), scale(Env_treatment_num), use = "complete.obs"),
Sample_Size = n(),
Sex_Ratio_SD = sd(Sex_Ratio, na.rm = TRUE),
.groups = "drop"
)
data_sex_ratio
view(data_sex_ratio)
view(data_sex_ratio)
# Calculate the correlation coefficient for scaled Sex_Ratio and Env_treatment, and sum of X_f and X_m as sample size
r_sex_ratio <- data_sex_ratio %>%
group_by(Study_ID, Species, Response_var) %>%
summarise(
# Check for variance in both Sex_Ratio and Env_treatment_num
Sex_Ratio_variance = var(Sex_Ratio, na.rm = TRUE),
Env_treatment_variance = var(Env_treatment_num, na.rm = TRUE),
# Only calculate correlation if both variables have variation
Correlation_Coeff = ifelse(Sex_Ratio_variance > 0 & Env_treatment_variance > 0,
cor(scale(Sex_Ratio), scale(Env_treatment_num), use = "complete.obs"),
NA),  # Set correlation to NA if either variable has no variation
Sample_Size = n(),
Sex_Ratio_SD = sd(Sex_Ratio, na.rm = TRUE),
.groups = "drop"
)
r_sex_ratio
view(r_sex_ratio)
# Calculate the correlation coefficient for scaled Sex_Ratio and Env_treatment, and sum of X_f and X_m as sample size
r_sex_ratio <- data_sex_ratio %>%
group_by(Study_ID, Species, Response_var) %>%
summarise(
# Check for variance in both Sex_Ratio and Env_treatment_num
Sex_Ratio_variance = var(Sex_Ratio, na.rm = TRUE),
Env_treatment_variance = var(Env_treatment_num, na.rm = TRUE),
# Only calculate correlation if both variables have variation
Correlation_Coeff = ifelse(Sex_Ratio_variance > 0 & Env_treatment_variance > 0,
cor(scale(Sex_Ratio), scale(Env_treatment_num), use = "complete.obs"),
NA),  # Set correlation to NA if either variable has no variation
Sample_Size = n(),
Sex_Ratio_SD = sd(Sex_Ratio, na.rm = TRUE),
.groups = "drop"
) %>%
drop_na(Correlation_Coeff)
r_sex_ratio
view(r_sex_ratio)
#view(dat_plant)
dat_plant %>% summarise(n_studies=length(unique(Study_ID)),
n_spp=length(unique(Species)))
# Remove all objects from the workspace to ensure a clean environment
rm(list = ls(all = TRUE))
# Load necessary packages
library(tidyverse)  # For data manipulation and visualization
# Set seed for reproducibility
set.seed(13)
# Load the dataset containing species-level sex ratio and environmental data
dat_plant <- read_csv(
"/Users/jm200/Library/CloudStorage/GoogleDrive-jm200@rice.edu/Shared drives/Miller Lab/BoCP/Meta-analysis/Data/plant.csv",
show_col_types = FALSE
)
# Summarize the dataset to get number of unique studies and species
dat_plant %>%
summarise(
n_studies = length(unique(Study_ID)),
n_spp = length(unique(Species))
)
# Step 1: Select relevant columns and filter rows with required measurements
dat_plant_MF <- dat_plant %>%
select(
Study_ID, Pub_Year, Species,
Xf, N_f, SE_f, SD_f,    # Female means, sample sizes, errors, and SDs
Xm, N_m, SE_m, SD_m,    # Male means, sample sizes, errors, and SDs
Env_treatment,          # Environmental treatment label
Response_var, Env_var_type, Env_Units
) %>%
mutate(
Env_treatment_num = suppressWarnings(parse_number(Env_treatment))  # Extract numeric component
) %>%
filter(
!is.na(Xf), !is.na(Xm), !is.na(Env_treatment_num)  # Keep rows with complete values
)
# Optional: Inspect structure of filtered data
str(dat_plant_MF)
# Step 2: Calculate sex ratio as the proportion of females
data_sex_ratio <- dat_plant_MF %>%
mutate(
Sex_Ratio = Xf / (Xf + Xm)  # Proportion of females in the population
)
# Step 3: Group data by study and species, compute correlation between sex ratio and environment
r_sex_ratio <- data_sex_ratio %>%
group_by(Study_ID, Species, Response_var) %>%
summarise(
# Calculate variances to ensure enough variation for correlation analysis
Sex_Ratio_variance = var(Sex_Ratio, na.rm = TRUE),
Env_treatment_variance = var(Env_treatment_num, na.rm = TRUE),
# Only compute correlation if both variables show variation
Correlation_Coeff = ifelse(
Sex_Ratio_variance > 0 & Env_treatment_variance > 0,
cor(scale(Sex_Ratio), scale(Env_treatment_num), use = "complete.obs"),
NA
),
Sample_Size = n(),  # Number of observations within each group
Sex_Ratio_SD = sd(Sex_Ratio, na.rm = TRUE),
.groups = "drop"
) %>%
drop_na(Correlation_Coeff)  # Remove rows where correlation couldn't be computed
r_sex_ratio
# Optional: View correlation results
# view(r_sex_ratio)
write_csv(dat_plant,"/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Meta-analysis/Data/correlation.csv")
# Optional: View correlation results
# view(r_sex_ratio)
write_csv(r_sex_ratio,"/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Meta-analysis/Data/correlation.csv")
