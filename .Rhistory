legend.position = c(0.38, 0.40),
legend.title = element_text(size = 10), # Reduce legend title size
legend.text = element_text(size = 12), # Adjust legend text size
axis.title = element_text(size = 13), # Increase axis title size
axis.text = element_text(size = 10), # Increase axis label size
strip.text = element_text(size = 13)
) # Increase facet label size)
demography_spik_aghy_pet
fit_allsites_spik_aghy_pet <- readRDS(url("https://www.dropbox.com/scl/fi/wmn81q56ya2ykf0hk4rrg/fit_allsites_spik_aghy_pet.rds?rlkey=1ifut2cb3zdhh19qm8t53mefh&dl=1"))
summary(fit_allsites_spik_aghy_pet)$summary[, c("Rhat", "n_eff")]
posterior_spik_aghy_pet <- as.array(fit_allsites_spik_aghy_pet) # Converts to an array
bayesplot::mcmc_trace(posterior_spik_aghy_pet,
pars = quote_bare(
b0_spk[1], b0_spk[2],
bendo_spk[1], bendo_spk[2],
bherb_spk[1], bherb_spk[2],
bclim_spk[1], bclim_spk[2],
bendoclim_spk[1], bendoclim_spk[2],
bendoherb_spk[1], bendoherb_spk[2],
bclim2_spk[1], bclim2_spk[2],
bendoclim2_spk[1], bendoclim2_spk[2]
)
) + theme_bw()
## Compute predictions using posterior draws
posterior_samples_spik_pet <- rstan::extract(fit_allsites_spik_aghy_pet)
n_draws <- 1000 # Number of posterior samples to use
pred_data_spik_pet <- as.data.frame(demography_spik_aghy_pet)
pred_matrix_spik_pet <- matrix(NA, nrow = n_draws, ncol = nrow(pred_data_spik_pet))
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_spik_pet)) {
species <- pred_data_spik_pet$species_spk[j]
pred_matrix_spik_pet[i, j] <- posterior_samples_spik_pet$b0_spk[i, species] +
posterior_samples_spik_pet$bendo_spk[i, species] * pred_data_spik_pet$endo_spk[j] +
posterior_samples_spik_pet$bclim_spk[i, species] * pred_data_spik_pet$clim_spk[j] +
posterior_samples_spik_pet$bherb_spk[i, species] * pred_data_spik_pet$herb_spk[j] +
posterior_samples_spik_pet$bendoclim_spk[i, species] * pred_data_spik_pet$clim_spk[j] * pred_data_spik_pet$endo_spk[j] +
posterior_samples_spik_pet$bendoherb_spk[i, species] * pred_data_spik_pet$endo_spk[j] * pred_data_spik_pet$herb_spk[j] +
posterior_samples_spik_pet$bclim2_spk[i, species] * pred_data_spik_pet$clim_spk[j]^2 +
posterior_samples_spik_pet$bendoclim2_spk[i, species] * pred_data_spik_pet$endo_spk[j] * pred_data_spik_pet$clim_spk[j]^2
}
}
# Convert logits to probability scale
pred_prob_spik_pet <- exp(pred_matrix_spik_pet)
# Compute mean and 95% credible interval
pred_data_spik_pet$mean_spikelet <- apply(pred_prob_spik_pet, 2, mean)
pred_data_spik_pet$lower_ci <- apply(pred_prob_spik_pet, 2, quantile, probs = 0.025)
pred_data_spik_pet$upper_ci <- apply(pred_prob_spik_pet, 2, quantile, probs = 0.975)
# Plot predicted spikth  with credible intervals
ggplot(pred_data_spik_pet, aes(x = exp(clim_spk), y = mean_spikelet, color = factor(endo_spk), fill = factor(endo_spk))) +
geom_line() + # Mean prediction
# geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci, fill = factor(endo_spk)), alpha = 0.3, color = NA) + # Credible interval
# geom_point(aes(x = exp(clim_spk), y = y_spk, color = factor(endo_spk)),
#   position = position_jitter(width = 0.1, height = 0.02), alpha = 0.5
# ) +
facet_grid(species_spk ~ herb_spk, labeller = labeller(
species_spk = c("1" = "AGHY", "2" = "ELVI", "3" = "POAU"),
herb_spk = c("0" = "Unfenced", "1" = "Fenced")
)) + # Facet by species & herbivory
labs(
x = "Potential Evapotranspiration",
y = "Inflorescence ",
color = "Endophyte",
fill = "Endophyte",
title = ""
) +
scale_color_manual(values = c("0" = "blue", "1" = "red"), labels = c("E-", "E+")) + # Change endophyte labels
scale_fill_manual(values = c("0" = "blue", "1" = "red"), labels = c("E-", "E+")) + # Change fill labels
theme_bw() +
theme(
legend.position = c(0.38, 0.40),
legend.title = element_text(size = 10), # Reduce legend title size
legend.text = element_text(size = 12), # Adjust legend text size
axis.title = element_text(size = 13), # Increase axis title size
axis.text = element_text(size = 10), # Increase axis label size
strip.text = element_text(size = 13)
) # Increase facet label size)
# Plot predicted spikth  with credible intervals
ggplot(pred_data_spik_pet, aes(x = exp(clim_spk), y = mean_spikelet, color = factor(endo_spk), fill = factor(endo_spk))) +
geom_line() + # Mean prediction
# geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci, fill = factor(endo_spk)), alpha = 0.3, color = NA) + # Credible interval
# geom_point(aes(x = exp(clim_spk), y = y_spk, color = factor(endo_spk)),
#   position = position_jitter(width = 0.1, height = 0.02), alpha = 0.5
# ) +
facet_grid(species_spk ~ herb_spk, labeller = labeller(
species_spk = c("1" = "AGHY", "2" = "ELVI", "3" = "POAU"),
herb_spk = c("0" = "Unfenced", "1" = "Fenced")
)) + # Facet by species & herbivory
labs(
x = "Potential Evapotranspiration",
y = "Inflorescence ",
color = "Endophyte",
fill = "Endophyte",
title = ""
) +
scale_color_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change endophyte labels
scale_fill_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change fill labels
theme_bw() +
theme(
legend.position = c(0.38, 0.40),
legend.title = element_text(size = 10), # Reduce legend title size
legend.text = element_text(size = 12), # Adjust legend text size
axis.title = element_text(size = 13), # Increase axis title size
axis.text = element_text(size = 10), # Increase axis label size
strip.text = element_text(size = 13)
) # Increase facet label size)
fit_allsites_spik_aghy_spei <- readRDS(url("https://www.dropbox.com/scl/fi/swhi510v2mhnlb62xrcvo/fit_allsites_spik_aghy_spei.rds?rlkey=s9szgdfhokb7jjn7zxix5t93e&dl=1"))
fit_allsites_spik_aghy_spei <- readRDS(url("https://www.dropbox.com/scl/fi/swhi510v2mhnlb62xrcvo/fit_allsites_spik_aghy_spei.rds?rlkey=s9szgdfhokb7jjn7zxix5t93e&dl=1"))
summary(fit_allsites_spik_aghy_spei)$summary[, c("Rhat", "n_eff")]
posterior_spik_aghy_spei <- as.array(fit_allsites_spik_aghy_spei) # Converts to an array
bayesplot::mcmc_trace(posterior_spik_aghy_spei,
pars = quote_bare(
b0_spk[1], b0_spk[2],
bendo_spk[1], bendo_spk[2],
bherb_spk[1], bherb_spk[2],
bclim_spk[1], bclim_spk[2],
bendoclim_spk[1], bendoclim_spk[2],
bendoherb_spk[1], bendoherb_spk[2],
bclim2_spk[1], bclim2_spk[2],
bendoclim2_spk[1], bendoclim2_spk[2]
)
) + theme_bw()
## Compute predictions using posterior draws
posterior_samples_spik_spei <- rstan::extract(fit_allsites_spik_aghy_spei)
n_draws <- 1000 # Number of posterior samples to use
pred_data_spik_spei <- as.data.frame(demography_spik_aghy_spei)
pred_matrix_spik_spei <- matrix(NA, nrow = n_draws, ncol = nrow(pred_data_spik_spei))
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_spik_spei)) {
species <- pred_data_spik_spei$species_spk[j]
pred_matrix_spik_spei[i, j] <- posterior_samples_spik_spei$b0_spk[i, species] +
posterior_samples_spik_spei$bendo_spk[i, species] * pred_data_spik_spei$endo_spk[j] +
posterior_samples_spik_spei$bclim_spk[i, species] * pred_data_spik_spei$clim_spk[j] +
posterior_samples_spik_spei$bherb_spk[i, species] * pred_data_spik_spei$herb_spk[j] +
posterior_samples_spik_spei$bendoclim_spk[i, species] * pred_data_spik_spei$clim_spk[j] * pred_data_spik_spei$endo_spk[j] +
posterior_samples_spik_spei$bendoherb_spk[i, species] * pred_data_spik_spei$endo_spk[j] * pred_data_spik_spei$herb_spk[j] +
posterior_samples_spik_spei$bclim2_spk[i, species] * pred_data_spik_spei$clim_spk[j]^2 +
posterior_samples_spik_spei$bendoclim2_spk[i, species] * pred_data_spik_spei$endo_spk[j] * pred_data_spik_spei$clim_spk[j]^2
}
}
# Convert logits to probability scale
pred_prob_spik_spei <- exp(pred_matrix_spik_spei)
# Compute mean and 95% credible interval
pred_data_spik_spei$mean_spikelet <- apply(pred_prob_spik_spei, 2, mean)
pred_data_spik_spei$lower_ci <- apply(pred_prob_spik_spei, 2, quantile, probs = 0.025)
pred_data_spik_spei$upper_ci <- apply(pred_prob_spik_spei, 2, quantile, probs = 0.975)
# Plot predicted spikvival probabilities with credible intervals
ggplot(pred_data_spik_spei, aes(x = exp(clim_spk), y = mean_spikelet, color = factor(endo_spk), fill = factor(endo_spk))) +
geom_line() + # Mean prediction
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci, fill = factor(endo_spk)), alpha = 0.3, color = NA) + # Credible interval
geom_point(aes(x = exp(clim_spk), y = y_spk, color = factor(endo_spk)),
position = position_jitter(width = 0.1, height = 0.02), alpha = 0.5
) +
facet_grid(species_spk ~ herb_spk, labeller = labeller(
species_spk = c("1" = "AGHY", "2" = "ELVI", "3" = "POAU"),
herb_spk = c("0" = "Unfenced", "1" = "Fenced")
)) + # Facet by species & herbivory
labs(
x = "Standardised precipitation-evapotranspiration index",
y = "Predicted survival probability",
color = "Endophyte",
fill = "Endophyte",
title = ""
) +
scale_color_manual(values = c("0" = "blue", "1" = "red"), labels = c("E-", "E+")) + # Change endophyte labels
scale_fill_manual(values = c("0" = "blue", "1" = "red"), labels = c("E-", "E+")) + # Change fill labels
theme_bw() +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_text(size = 10), # Reduce legend title size
legend.text = element_text(size = 12), # Adjust legend text size
axis.title = element_text(size = 13), # Increase axis title size
axis.text = element_text(size = 10), # Increase axis label size
strip.text = element_text(size = 13)
)
# Plot predicted spikvival probabilities with credible intervals
ggplot(pred_data_spik_spei, aes(x = exp(clim_spk), y = mean_spikelet, color = factor(endo_spk), fill = factor(endo_spk))) +
geom_line() + # Mean prediction
# geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci, fill = factor(endo_spk)), alpha = 0.3, color = NA) + # Credible interval
# geom_point(aes(x = exp(clim_spk), y = y_spk, color = factor(endo_spk)),
#   position = position_jitter(width = 0.1, height = 0.02), alpha = 0.5
# ) +
facet_grid(species_spk ~ herb_spk, labeller = labeller(
species_spk = c("1" = "AGHY", "2" = "ELVI", "3" = "POAU"),
herb_spk = c("0" = "Unfenced", "1" = "Fenced")
)) + # Facet by species & herbivory
labs(
x = "Standardised precipitation-evapotranspiration index",
y = "Predicted survival probability",
color = "Endophyte",
fill = "Endophyte",
title = ""
) +
scale_color_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change endophyte labels
scale_fill_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change fill labels
theme_bw() +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_text(size = 10), # Reduce legend title size
legend.text = element_text(size = 12), # Adjust legend text size
axis.title = element_text(size = 13), # Increase axis title size
axis.text = element_text(size = 10), # Increase axis label size
strip.text = element_text(size = 13)
)
fit_allsites_spik_aghy_distance <- readRDS(url("https://www.dropbox.com/scl/fi/7apjqo8nris1vlgih4enz/fit_allsites_spik_aghy_distance.rds?rlkey=lhcl48ud0uuve6wetkwx4ov14&dl=1"))
summary(fit_allsites_spik_aghy_distance)$summary[, c("Rhat", "n_eff")]
posterior_spik_aghy_distance <- as.array(fit_allsites_spik_aghy_distance) # Converts to an array
bayesplot::mcmc_trace(posterior_spik_aghy_distance,
pars = quote_bare(
b0_spk[1], b0_spk[2],
bendo_spk[1], bendo_spk[2],
bherb_spk[1], bherb_spk[2],
bclim_spk[1], bclim_spk[2],
bendoclim_spk[1], bendoclim_spk[2],
bendoherb_spk[1], bendoherb_spk[2],
bclim2_spk[1], bclim2_spk[2],
bendoclim2_spk[1], bendoclim2_spk[2]
)
) + theme_bw()
posterior_samples_spik_distance <- rstan::extract(fit_allsites_spik_aghy_distance)
n_draws <- 1000 # Number of posterior samples to use
pred_data_spik_distance <- as.data.frame(demography_spik_aghy_distance)
pred_matrix_spik_distance <- matrix(NA, nrow = n_draws, ncol = nrow(pred_data_spik_distance))
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_spik_distance)) {
species <- pred_data_spik_distance$species_spk[j]
pred_matrix_spik_distance[i, j] <- posterior_samples_spik_distance$b0_spk[i, species] +
posterior_samples_spik_distance$bendo_spk[i, species] * pred_data_spik_distance$endo_spk[j] +
posterior_samples_spik_distance$bclim_spk[i, species] * pred_data_spik_distance$clim_spk[j] +
posterior_samples_spik_distance$bherb_spk[i, species] * pred_data_spik_distance$herb_spk[j] +
posterior_samples_spik_distance$bendoclim_spk[i, species] * pred_data_spik_distance$clim_spk[j] * pred_data_spik_distance$endo_spk[j] +
posterior_samples_spik_distance$bendoherb_spk[i, species] * pred_data_spik_distance$endo_spk[j] * pred_data_spik_distance$herb_spk[j] +
posterior_samples_spik_distance$bclim2_spk[i, species] * pred_data_spik_distance$clim_spk[j]^2 +
posterior_samples_spik_distance$bendoclim2_spk[i, species] * pred_data_spik_distance$endo_spk[j] * pred_data_spik_distance$clim_spk[j]^2
}
}
pred_prob_spik_distance <- exp(pred_matrix_spik_distance)
# Compute mean and 95% credible interval
pred_data_spik_distance$mean_spikelet <- apply(pred_prob_spik_distance, 2, mean)
pred_data_spik_distance$lower_ci <- apply(pred_prob_spik_distance, 2, quantile, probs = 0.025)
pred_data_spik_distance$upper_ci <- apply(pred_prob_spik_distance, 2, quantile, probs = 0.975)
# Plot predicted spikvival probabilities with credible intervals
ggplot(pred_data_spik_distance, aes(x = exp(clim_spk), y = mean_spikelet, color = factor(endo_spk), fill = factor(endo_spk))) +
geom_line() + # Mean prediction
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci, fill = factor(endo_spk)), alpha = 0.3, color = NA) + # Credible interval
geom_point(aes(x = exp(clim_spk), y = y_spk, color = factor(endo_spk)),
position = position_jitter(width = 0.1, height = 0.02), alpha = 0.5
) +
facet_grid(species_spk ~ herb_spk, labeller = labeller(
species_spk = c("1" = "AGHY", "2" = "ELVI", "3" = "POAU"),
herb_spk = c("0" = "Unfenced", "1" = "Fenced")
)) + # Facet by species & herbivory
labs(
x = "Mahalanobis distance",
y = "Predicted relative spikth",
color = "Endophyte",
fill = "Endophyte",
title = ""
) +
scale_color_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change endophyte labels
scale_fill_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change fill labels
theme_bw() +
theme(
legend.position = c(0.35, 0.40),
legend.title = element_text(size = 10), # Reduce legend title size
legend.text = element_text(size = 12), # Adjust legend text size
axis.title = element_text(size = 13), # Increase axis title size
axis.text = element_text(size = 10), # Increase axis label size
strip.text = element_text(size = 13)
) # Increase facet label size
# Plot predicted spikvival probabilities with credible intervals
ggplot(pred_data_spik_distance, aes(x = exp(clim_spk), y = mean_spikelet, color = factor(endo_spk), fill = factor(endo_spk))) +
geom_line() + # Mean prediction
# geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci, fill = factor(endo_spk)), alpha = 0.3, color = NA) + # Credible interval
# geom_point(aes(x = exp(clim_spk), y = y_spk, color = factor(endo_spk)),
#   position = position_jitter(width = 0.1, height = 0.02), alpha = 0.5
# ) +
facet_grid(species_spk ~ herb_spk, labeller = labeller(
species_spk = c("1" = "AGHY", "2" = "ELVI", "3" = "POAU"),
herb_spk = c("0" = "Unfenced", "1" = "Fenced")
)) + # Facet by species & herbivory
labs(
x = "Mahalanobis distance",
y = "Predicted relative spikth",
color = "Endophyte",
fill = "Endophyte",
title = ""
) +
scale_color_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change endophyte labels
scale_fill_manual(values = c("0" = "#00AFBB", "1" = "#FC4E07"), labels = c("E-", "E+")) + # Change fill labels
theme_bw() +
theme(
legend.position = c(0.35, 0.40),
legend.title = element_text(size = 10), # Reduce legend title size
legend.text = element_text(size = 12), # Adjust legend text size
axis.title = element_text(size = 13), # Increase axis title size
axis.text = element_text(size = 10), # Increase axis label size
strip.text = element_text(size = 13)
) # Increase facet label size
posterior_sur_aghy_ppt
posterior_surv_aghy_ppt
posterior_surv_aghy_ppt$y_rep
posterior_samples_sur_ppt$y_rep
str(fit_allsites_surv_aghy_ppt)
head(posterior_samples_sur_ppt)
## Posterior predictive check for  all models
# Extract posterior predictive samples
posterior_samples <- extract(fit_allsites_surv_aghy_ppt)
## Posterior predictive check for  all models
# Extract posterior predictive samples
posterior_samples <- rstan::extract(fit_allsites_surv_aghy_ppt)
# Check available parameters in the posterior
names(posterior_samples)  # Ensure 'y_rep' exists
# Extract posterior predictive distribution
y_rep <- posterior_samples$log_lik  # Should be a matrix (iterations x data points)
# Actual observed data
y_obs <- demography_surv_aghy_ppt$y_s
ppc_dens_overlay(y_obs, y_rep[1:50, ])  # Use 50 posterior samples
y_rep
y_obs
ppc_dens_overlay(y_obs, y_rep[1:1000, ])  # Use 50 posterior samples
ppc_boxplot(y_obs, y_rep[1:100, ])
ppc_dens_overlay(y_obs, y_rep[1:1000, ]) +
coord_cartesian(xlim = c(1, 1))
ppc_dens_overlay(y_obs, y_rep[1:1000, ]) +
coord_cartesian(xlim = c(-1, 1))
ppc_dens_overlay(y_obs, y_rep[1:1000, ]) +
coord_cartesian(xlim = c(-0.3, 0.3))
y_obs
ppc_dens_overlay(y_obs, y_rep[1:1000, ]) +
coord_cartesian(xlim = c(-0.1, 0.1))
fit_allsites_surv_aghy_ppt
data_sites_surv_aghy_distance
sim_pars
## Running the stan model
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 2,
chains = 4,
control = list(adapt_delta = 0.99, max_treedepth = 15)
)
fit_allsites_surv_aghy_distance_linear <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/stan/survival_distance.stan",
data = data_sites_surv_aghy_distance,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains,
control = sim_pars$control)
summary(fit_allsites_surv_aghy_distance_linear)$summary[, c("Rhat", "n_eff")]
posterior_surv_aghy_distance_linear <- as.array(fit_allsites_surv_aghy_distance_linear) # Converts to an array
bayesplot::mcmc_trace(posterior_surv_aghy_distance_linear,
pars = quote_bare(
b0_s[1], b0_s[2], b0_s[3],
bendo_s[1], bendo_s[2], bendo_s[3],
bherb_s[1], bherb_s[2], bherb_s[3],
bclim_s[1], bclim_s[2], bclim_s[3],
bendoclim_s[1], bendoclim_s[2], bendoclim_s[3],
bendoherb_s[1], bendoherb_s[2], bendoherb_s[3],
bclim2_s[1], bclim2_s[2], bclim2_s[3],
bendoclim2_s[1], bendoclim2_s[2], bendoclim2_s[3]
)
) + theme_bw()
bayesplot::mcmc_trace(posterior_surv_aghy_distance_linear,
pars = quote_bare(
b0_s[1], b0_s[2], b0_s[3],
bendo_s[1], bendo_s[2], bendo_s[3],
bherb_s[1], bherb_s[2], bherb_s[3],
bclim_s[1], bclim_s[2], bclim_s[3],
bendoclim_s[1], bendoclim_s[2], bendoclim_s[3],
bendoherb_s[1], bendoherb_s[2], bendoherb_s[3]
)
) + theme_bw()
## Compute predictions using posterior draws
posterior_samples_sur_distance_linear <- rstan::extract(posterior_surv_aghy_distance_linear)
## Compute predictions using posterior draws
posterior_samples_sur_distance_linear <- rstan::extract(fit_allsites_surv_aghy_distance_linear)
n_draws <- 1000 # Number of posterior samples to use
pred_data_sur_distance_linear <- as.data.frame(data_sites_surv_aghy_distance)
pred_matrix_sur_distance_linear <- matrix(NA, nrow = n_draws, ncol = nrow(pred_data_sur_distance_linear))
pred_data_sur_distance_linear$species_s
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_sur_distance_linear)) {
species <- pred_data_sur_distance_linear$species_s[j]
pred_matrix_sur_distance_linear[i, j] <- posterior_samples_sur_distance_linear$b0_s[i, species] +
posterior_samples_sur_distance_linear$bendo_s[i, species] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] +
posterior_samples_sur_distance_linear$bherb_s[i, species] * pred_data_sur_distance_linear$herb_s[j] +
posterior_samples_sur_distance_linear$bendoclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] * pred_data_sur_distance$endo_s[j] +
posterior_samples_sur_distance_linear$bendoherb_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance$herb_s[j] +
posterior_samples_sur_distance_linear$bclim2_s[i, species] * pred_data_sur_distance_linear$clim_s[j]^2 +
posterior_samples_sur_distance_linear$bendoclim2_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance_linear$clim_s[j]^2
}
}
pred_data_sur_distance_linear
pred_matrix_sur_distance_linear <- matrix(NA, nrow = n_draws, ncol = nrow(pred_data_sur_distance_linear))
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_sur_distance_linear)) {
species <- posterior_samples_sur_distance_linear$species_s[j]
pred_matrix_sur_distance_linear[i, j] <- posterior_samples_sur_distance_linear$b0_s[i, species] +
posterior_samples_sur_distance_linear$bendo_s[i, species] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] +
posterior_samples_sur_distance_linear$bherb_s[i, species] * pred_data_sur_distance_linear$herb_s[j] +
posterior_samples_sur_distance_linear$bendoclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] * pred_data_sur_distance$endo_s[j] +
posterior_samples_sur_distance_linear$bendoherb_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance$herb_s[j] +
posterior_samples_sur_distance_linear$bclim2_s[i, species] * pred_data_sur_distance_linear$clim_s[j]^2 +
posterior_samples_sur_distance_linear$bendoclim2_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance_linear$clim_s[j]^2
}
}
pred_data_sur_distance_linear$species_s
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_sur_distance_linear)) {
species <- pred_data_sur_distance_linear$species_s[j]
pred_matrix_sur_distance_linear[i, j] <- posterior_samples_sur_distance_linear$b0_s[i, species] +
posterior_samples_sur_distance_linear$bendo_s[i, species] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] +
posterior_samples_sur_distance_linear$bherb_s[i, species] * pred_data_sur_distance_linear$herb_s[j] +
posterior_samples_sur_distance_linear$bendoclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] * pred_data_sur_distance$endo_s[j] +
posterior_samples_sur_distance_linear$bendoherb_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance$herb_s[j]
}
}
# Convert logits to probability scale
pred_prob_sur_distance_linear <- invlogit(pred_matrix_sur_distance_linear)
# Compute mean and 95% credible interval
pred_prob_sur_distance_linear$mean_survival <- apply(pred_prob_sur_distance_linear, 2, mean)
pred_prob_sur_distance_linear
pred_prob_sur_distance_linear
# Compute mean and 95% credible interval
pred_prob_sur_distance_linear$mean_survival <- apply(pred_prob_sur_distance_linear, 2, mean)
pred_matrix_sur_distance_linear
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_sur_distance_linear)) {
species <- pred_data_sur_distance_linear$species_s[j]
pred_matrix_sur_distance_linear[i, j] <- posterior_samples_sur_distance_linear$b0_s[i, species] +
posterior_samples_sur_distance_linear$bendo_s[i, species] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] +
posterior_samples_sur_distance_linear$bherb_s[i, species] * pred_data_sur_distance_linear$herb_s[j] +
posterior_samples_sur_distance_linear$bendoclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bendoherb_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance$herb_s[j]
}
}
# Convert logits to probability scale
pred_prob_sur_distance_linear <- invlogit(pred_matrix_sur_distance_linear)
# Compute mean and 95% credible interval
pred_prob_sur_distance_linear$mean_survival <- apply(pred_prob_sur_distance_linear, 2, mean)
pred_matrix_sur_distance_linear
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_sur_distance_linear)) {
species <- pred_data_sur_distance_linear$species_s[j]
pred_matrix_sur_distance_linear[i, j] <- posterior_samples_sur_distance_linear$b0_s[i, species] +
posterior_samples_sur_distance_linear$bendo_s[i, species] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] +
posterior_samples_sur_distance_linear$bherb_s[i, species] * pred_data_sur_distance_linear$herb_s[j] +
posterior_samples_sur_distance_linear$bendoclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bendoherb_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance_linear$herb_s[j]
}
}
# Convert logits to probability scale
pred_prob_sur_distance_linear <- invlogit(pred_matrix_sur_distance_linear)
pred_prob_sur_distance_linear
# Compute mean and 95% credible interval
pred_prob_sur_distance_linear$mean_survival <- apply(pred_prob_sur_distance_linear, 2, mean)
## Compute predictions using posterior draws
posterior_samples_sur_distance_linear <- rstan::extract(fit_allsites_surv_aghy_distance_linear)
n_draws <- 1000 # Number of posterior samples to use
pred_data_sur_distance_linear
pred_data_sur_distance_linear <- as.data.frame(data_sites_surv_aghy_distance)
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_sur_distance_linear)) {
species <- pred_data_sur_distance_linear$species_s[j]
pred_matrix_sur_distance_linear[i, j] <- posterior_samples_sur_distance_linear$b0_s[i, species] +
posterior_samples_sur_distance_linear$bendo_s[i, species] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] +
posterior_samples_sur_distance_linear$bherb_s[i, species] * pred_data_sur_distance_linear$herb_s[j] +
posterior_samples_sur_distance_linear$bendoclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bendoherb_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance_linear$herb_s[j]
}
}
pred_matrix_sur_distance_linear
# Convert logits to probability scale
pred_prob_sur_distance_linear <- invlogit(pred_matrix_sur_distance_linear)
pred_prob_sur_distance_linear
apply(pred_prob_sur_distance_linear, 2, mean)
# Compute mean and 95% credible interval
pred_prob_sur_distance_linear$mean_survival <- apply(pred_prob_sur_distance_linear, 2, mean)
apply(pred_prob_sur_distance_linear, 2, mean)
# Convert logits to probability scale
pred_prob_sur_distance_linear <- invlogit(pred_matrix_sur_distance_linear)
apply(pred_prob_sur_distance_linear, 2, mean)
pred_prob_sur_distance_linear
## Compute predictions using posterior draws
posterior_samples_sur_distance_linear <- rstan::extract(fit_allsites_surv_aghy_distance_linear)
n_draws <- 1000 # Number of posterior samples to use
pred_data_sur_distance_linear <- as.data.frame(data_sites_surv_aghy_distance)
pred_matrix_sur_distance_linear <- matrix(NA, nrow = n_draws, ncol = nrow(pred_data_sur_distance_linear))
for (i in 1:n_draws) {
for (j in 1:nrow(pred_data_sur_distance_linear)) {
species <- pred_data_sur_distance_linear$species_s[j]
pred_matrix_sur_distance_linear[i, j] <- posterior_samples_sur_distance_linear$b0_s[i, species] +
posterior_samples_sur_distance_linear$bendo_s[i, species] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] +
posterior_samples_sur_distance_linear$bherb_s[i, species] * pred_data_sur_distance_linear$herb_s[j] +
posterior_samples_sur_distance_linear$bendoclim_s[i, species] * pred_data_sur_distance_linear$clim_s[j] * pred_data_sur_distance_linear$endo_s[j] +
posterior_samples_sur_distance_linear$bendoherb_s[i, species] * pred_data_sur_distance_linear$endo_s[j] * pred_data_sur_distance_linear$herb_s[j]
}
}
# Convert logits to probability scale
pred_prob_sur_distance_linear <- invlogit(pred_matrix_sur_distance_linear)
# Compute mean and 95% credible interval
pred_prob_sur_distance_linear$mean_survival <- apply(pred_prob_sur_distance_linear, 2, mean)
pred_prob_sur_distance_linear
pred_prob_sur_distance_linear$lower_ci <- apply(pred_prob_sur_distance_linear, 2, quantile, probs = 0.025)
