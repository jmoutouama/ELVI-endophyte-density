plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPCSurvival.pdf",useDingbats = F,height=7,width=6)
multiplot(ppc_surv_season,
ppc_surv_season_polyn,cols=2)
dev.off()
ppc_dens_overlay(poar_sites_season.surv$y_s, y_ss_sim)+
xlab("Survival status")+ylab("Density")+
ggtitle(("Seasonal"))+theme(legend.position = "none")+theme_bw()->ppc_surv_season
ppc_surv_season
ppc_dens_overlay(poar_sites_season.surv$y_s, y_ss_sim)+
xlab("Survival status")+ylab("Density")+
ggtitle(("Seasonal"))+theme(legend.position = "none")+theme_bw()->ppc_surv_season
ppc_dens_overlay(poar_sites_season.surv$y_s, y_sps_sim)+
xlab("Survival status")+ylab("Density")+
ggtitle(("Seasonal Polynomial"))+theme(legend.position = "none")+theme_bw()->ppc_surv_season_polyn
# print figure
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPCSurvival.pdf",useDingbats = F,height=4,width=6)
multiplot(ppc_surv_season,
ppc_surv_season_polyn,cols=2)
dev.off()
ppc_dens_overlay(poar_sites_season.surv$y_s, y_ss_sim)+
xlab("Survival status")+ylab("Density")+
ggtitle(("Seasonal linear"))+theme(legend.position = "none")+theme_bw()->ppc_surv_season
ppc_dens_overlay(poar_sites_season.surv$y_s, y_sps_sim)+
xlab("Survival status")+ylab("Density")+
ggtitle(("Seasonal Polynomial"))+theme(legend.position = "none")+theme_bw()->ppc_surv_season_polyn
# print figure
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPCSurvival.pdf",useDingbats = F,height=3,width=6)
multiplot(ppc_surv_season,
ppc_surv_season_polyn,cols=2)
dev.off()
# growth
poar.clim_seasonal %>%
subset( tillerN_t0 > 0 & tillerN_t1 > 0)%>%
dplyr::select( year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t0, tillerN_t1,surv_t1,pptgrow,pptdorm,tempgrow,tempdorm,site)%>%
na.omit %>%
mutate( site         = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex          = Sex %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric ) %>%
mutate( z_size_t0   = tillerN_t0 %>% scale %>% .[,1],
z_ppt_t1_grow = pptgrow %>% scale %>% .[,1],
z_ppt_t1_dorm = pptdorm %>% scale %>% .[,1],
z_temp_t1_grow = tempgrow %>% scale %>% .[,1],
z_temp_t1_dorm = tempdorm %>% scale %>% .[,1])->poarclim_seasonal.grow
poar_sites_season.grow <- list( n_sites    = poarclim_seasonal.surv$site %>% n_distinct,
n_sources  = poarclim_seasonal.surv$source %>% n_distinct(),
# growth data
n_blocks_g = poarclim_seasonal.grow$Block %>% n_distinct,
site_g   = poarclim_seasonal.grow$site,
source_g =  poarclim_seasonal.grow$source,
block_g  = poarclim_seasonal.grow$Block,
pptgrow_g=poarclim_seasonal.grow$z_ppt_t1_grow,
pptdorm_g=poarclim_seasonal.grow$z_ppt_t1_dorm,
tempgrow_g=poarclim_seasonal.grow$z_temp_t1_grow,
tempdorm_g=poarclim_seasonal.grow$z_temp_t1_dorm,
site_block_g = data.frame( site_i  = poarclim_seasonal.grow$site,
block_i = poarclim_seasonal.grow$Block ) %>%
unique %>% .$site_i,
male_g   = poarclim_seasonal.grow$Sex-1,
size_g   = poarclim_seasonal.grow$z_size_t0,
y_g      = poarclim_seasonal.grow$tillerN_t1,
n_g      = nrow(poarclim_seasonal.grow))
#load stan output -- this will also take a while, but not as long as running the model from scratch
fit_allsites_grow_season <- readRDS(url("https://www.dropbox.com/s/3h9x43ku3f58up9/poar_growth_season.rds?dl=1"))
#load stan output -- this will also take a while, but not as long as running the model from scratch
fit_allsites_grow_season_polyn <- readRDS(url("https://www.dropbox.com/s/onie8qtrzer8cme/poar_growth_seasonpolynomial.rds?dl=1"))
#pull out parameter posterior distributions
predGS <- rstan::extract(fit_allsites_grow_season, pars = c("predG"))$predG
predGSP <- rstan::extract(fit_allsites_grow_season_polyn, pars = c("predG"))$predG
sigmaGS <- rstan::extract(fit_allsites_grow_season, pars = c("sigma"))$sigma
sigmaGSP <- rstan::extract(fit_allsites_grow_season_polyn, pars = c("sigma"))$sigma
#draw 500 random samples from the joint posterior
n_post_draws <- 500
post_draws <- sample.int(dim(predGS)[1], n_post_draws)
#set up simulation output
y_gs_sim <- matrix(NA,n_post_draws,length(poar_sites_season.grow$y_g))
y_gps_sim <- matrix(NA,n_post_draws,length(poar_sites_season.grow$y_g))
#loop over the posterior and generate new observations
for(i in 1:n_post_draws){
print(i)
## sample growth data (zero-truncated PIG) -- generates data as legit PIG
for(j in 1:length(poar_sites_season.grow$y_g)){
## the pig function appears numerically unstable at low probabilities, so here is a hacky solution
pig<-dpoisinvgauss(0:1000,mean=predGS[i,j],shape=(sigmaGS[i]*predGS[i,j]))
pig[is.nan(pig) | is.infinite(pig)] <- 0
pig_trunc_prob <- pig[2:1001] / (1 - ((1 - sum(pig)) + pig[1]))
y_gs_sim[i,j] <- sample(x=1:1000,size=1,replace=T,prob=pig_trunc_prob)
}
## sample growth data (zero-truncated PIG) -- generates data as legit PIG
for(j in 1:length(poar_sites_season.grow$y_g)){
## the pig function appears numerically unstable at low probabilities, so here is a hacky solution
pig<-dpoisinvgauss(0:1000,mean=predGSP[i,j],shape=(sigmaGSP[i]*predGSP[i,j]))
pig[is.nan(pig) | is.infinite(pig)] <- 0
pig_trunc_prob <- pig[2:1001] / (1 - ((1 - sum(pig)) + pig[1]))
y_gps_sim[i,j] <- sample(x=1:1000,size=1,replace=T,prob=pig_trunc_prob)
}
}
ppc_dens_overlay(poar_sites_season.grow$y_g, y_gs_sim)+
xlab("Growth status")+ylab("Density")+
ggtitle(("Seasonal linear"))+theme(legend.position = "none")+theme_bw()->ppc_grow_season
ppc_grow_season
ppc_dens_overlay(poar_sites_season.grow$y_g, y_gps_sim)+
xlab("Growth status")+ylab("Density")+
ggtitle(("Seasonal Polynomial"))+theme(legend.position = "none")+theme_bw()->ppc_grow_season_polyn
ppc_grow_season_polyn
poar.clim_seasonal %>%
subset( tillerN_t1 > 0 )%>%
dplyr::select( year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t1, flowerN_t1,flow_t1,pptgrow,pptdorm,tempgrow,tempdorm,site)%>%
na.omit %>%
mutate( site         = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex          = Sex %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric ) %>%
mutate( z_size_t1   = tillerN_t1 %>% scale %>% .[,1],
z_ppt_t1_grow = pptgrow %>% scale %>% .[,1],
z_ppt_t1_dorm = pptdorm %>% scale %>% .[,1],
z_temp_t1_grow = tempgrow %>% scale %>% .[,1],
z_temp_t1_dorm = tempdorm %>% scale %>% .[,1])->poarclim_seasonal.flow
poar_sites_season.flow <- list( n_sites    = poarclim_seasonal.surv$site %>% n_distinct,
n_sources  = poarclim_seasonal.surv$source %>% n_distinct(),
# flowering data
n_blocks_f = poarclim_seasonal.flow$Block %>% n_distinct,
site_f   = poarclim_seasonal.flow$site,
source_f =  poarclim_seasonal.flow$source,
block_f  = poarclim_seasonal.flow$Block,
pptgrow_f=poarclim_seasonal.flow$z_ppt_t1_grow,
pptdorm_f=poarclim_seasonal.flow$z_ppt_t1_dorm,
tempgrow_f=poarclim_seasonal.flow$z_temp_t1_grow,
tempdorm_f=poarclim_seasonal.flow$z_temp_t1_dorm,
site_block_f = data.frame( site_i  = poarclim_seasonal.flow$site,
block_i = poarclim_seasonal.flow$Block ) %>%
unique %>% .$site_i,
male_f   = poarclim_seasonal.flow$Sex-1,
size_f   = poarclim_seasonal.flow$z_size_t1,
y_f      = poarclim_seasonal.flow$flow_t1,
n_f      = nrow(poarclim_seasonal.flow))
#load stan output -- this will also take a while, but not as long as running the model from scratch
fit_allsites_flow_season <- readRDS(url("https://www.dropbox.com/s/esq822z7cbie4os/poar_flow_season.rds?dl=1"))
#load stan output -- this will also take a while, but not as long as running the model from scratch
fit_allsites_flow_season_polyn <- readRDS(url("https://www.dropbox.com/s/o5r2hijb256fmb7/poar_flow_seasonpolynomial.rds?dl=1"))
predFS <- rstan::extract(fit_allsites_flow_season, pars = c("predF"))$predF
predFSP <- rstan::extract(fit_allsites_flow_season_polyn, pars = c("predF"))$predF
#draw 500 random samples from the joint posterior
n_post_draws <- 500
y_fs_sim <- matrix(NA,n_post_draws,length(poar_sites_season.flow$y_f))
y_fps_sim <- matrix(NA,n_post_draws,length(poar_sites_season.flow$y_f))
for(i in 1:n_post_draws){
print(i)
## sample flowering data (bernoulli)
y_fs_sim [i,] <- rbinom(n=length(poar_sites_season.flow$y_f), size=1, prob = invlogit(predFS[i,]))
## sample flowering data (bernoulli)
y_fps_sim [i,] <- rbinom(n=length(poar_sites_season.flow$y_f), size=1, prob = invlogit(predFSP[i,]))
}
ppc_dens_overlay(poar_sites_season.flow$y_f, y_fs_sim)+
xlab("Flowering status")+ylab("Density")+
ggtitle(("Seasonal"))+theme(legend.position = "none")+theme_bw()->ppc_flow_season
ppc_dens_overlay(poar_sites_season.flow$y_f, y_fps_sim)+
xlab("Flowering status")+ylab("Density")+
ggtitle(("Seasonal Polynomial"))+theme(legend.position = "none")+theme_bw()->ppc_flow_season_polyn
ppc_flow_season
ppc_flow_season_polyn
poar.clim_seasonal %>%
subset( flowerN_t1 > 0 & tillerN_t1 > 0 )%>%
dplyr::select( year, Code, site, Block, Sex,
Longitude, Latitude,
tillerN_t1, flowerN_t1,pptgrow,pptdorm,tempgrow,tempdorm,site)%>%
na.omit %>%
mutate( site         = site %>% as.factor %>% as.numeric,
Block = Block %>% as.factor %>% as.numeric,
Sex          = Sex %>% as.factor %>% as.numeric,
source = Code %>% as.factor %>% as.numeric,
panic_t1 = flowerN_t1) %>%
mutate( z_size_t1   = tillerN_t1 %>% scale %>% .[,1],
z_ppt_t1_grow = pptgrow %>% scale %>% .[,1],
z_ppt_t1_dorm = pptdorm %>% scale %>% .[,1],
z_temp_t1_grow = tempgrow %>% scale %>% .[,1],
z_temp_t1_dorm = tempdorm %>% scale %>% .[,1])->poarclim_seasonal.panic
poar_sites_season.panic <- list( n_sites    = poarclim_seasonal.surv$site %>% n_distinct,
n_sources  = poarclim_seasonal.surv$source %>% n_distinct(),
# panicle data
n_blocks_p = poarclim_seasonal.panic$Block %>% n_distinct,
site_p   = poarclim_seasonal.panic$site,
source_p =  poarclim_seasonal.panic$source,
block_p  = poarclim_seasonal.panic$Block,
pptgrow_p=poarclim_seasonal.panic$z_ppt_t1_grow,
pptdorm_p=poarclim_seasonal.panic$z_ppt_t1_dorm,
tempgrow_p=poarclim_seasonal.panic$z_temp_t1_grow,
tempdorm_p=poarclim_seasonal.panic$z_temp_t1_dorm,
site_block_p = data.frame( site_i  = poarclim_seasonal.panic$site,
block_i = poarclim_seasonal.panic$Block ) %>%
unique %>% .$site_i,
male_p   = poarclim_seasonal.panic$Sex-1,
size_p   = poarclim_seasonal.panic$z_size_t1,
y_p      = poarclim_seasonal.panic$panic_t1,
n_p      = nrow(poarclim_seasonal.panic))
fit_allsites_panic_season <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/stan/poar_panicle_season.stan",
data = poar_sites_season.panic,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
#load stan output -- this will also take a while, but not as long as running the model from scratch
fit_allsites_panic_season <- readRDS(url("https://www.dropbox.com/s/v7h35imi9u7rveo/poar_panicle_season.rds?dl=1"))
#load stan output -- this will also take a while, but not as long as running the model from scratch
fit_allsites_panic_season_polyn <- readRDS(url("https://www.dropbox.com/s/ydtzwurgf7s58lt/poar_panicle_seasonpolynomial.rds?dl=1"))
#pull out parameter posterior distributions
predPS <- rstan::extract(fit_allsites_panic_season, pars = c("predP"))$predP
predPSP <- rstan::extract(fit_allsites_panic_season_polyn, pars = c("predP"))$predP
phi_PS <- rstan::extract(fit_allsites_panic_season, pars = c("phi_p"))$phi_p
phi_PSP <- rstan::extract(fit_allsites_panic_season_polyn, pars = c("phi_p"))$phi_p
#draw 500 random samples from the joint posterior
n_post_draws <- 500
# post_draws <- sample.int(dim(predPA)[1], n_post_draws)
#set up simulation output
y_ps_sim <- matrix(NA,n_post_draws,length(poar_sites_season.panic$y_p))
y_pps_sim <- matrix(NA,n_post_draws,length(poar_sites_season.panic$y_p))
#loop over the posterior and generate new observations
for(i in 1:n_post_draws){
print(i)
## sample panicle data (zero-truncated NB)
for(j in 1:length(poar_sites_season.panic$y_p)){
y_ps_sim[i,j] <- sample(x=1:1000,size=1,replace=T,prob=dnbinom(1:1000, mu = exp(predPS[i,j]), size=phi_PS[i]) / (1 - dnbinom(0, mu = exp(predPS[i,j]), size=phi_PS[i])))
}
## sample panicle data (zero-truncated NB)
for(j in 1:length(poar_sites_season.panic$y_p)){
y_pps_sim[i,j] <- sample(x=1:1000,size=1,replace=T,prob=dnbinom(1:1000, mu = exp(predPSP[i,j]), size=phi_PSP[i]) / (1 - dnbinom(0, mu = exp(predPSP[i,j]), size=phi_PSP[i])))
}
}
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("Seasonal"))+theme(legend.position = "none")+theme_bw()->ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_pps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("Seasonal Polynomial"))+theme(legend.position = "none")+theme_bw()->ppc_panic_season_polyn
ppc_panic_season
ppc_panic_season_polyn
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPC.pdf",useDingbats = F,height=9,width=6)
multiplot(ppc_surv_season,ppc_surv_season_polyn,ppc_grow_season,ppc_grow_season_polyn,ppc_flow_season,ppc_flow_season_polyn, ppc_panic_season,
ppc_panic_season_polyn,cols=2)
dev.off()
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPC.pdf",useDingbats = F,height=9,width=6)
multiplot(ppc_surv_season,ppc_flow_season,ppc_grow_season,ppc_surv_season_polyn,ppc_panic_season,ppc_grow_season_polyn,ppc_flow_season_polyn,ppc_panic_season_polyn,cols=2)
dev.off()
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPC.pdf",useDingbats = F,height=9,width=6)
multiplot(ppc_surv_season,ppc_surv_season_polyn,
ppc_grow_season,ppc_grow_season_polyn,
ppc_flow_season,ppc_flow_season_polyn,
ppc_panic_season,ppc_panic_season_polyn,cols=2)
dev.off()
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPC.pdf",useDingbats = F,height=9,width=6)
multiplot(ppc_surv_season,ppc_grow_season,
ppc_flow_season,ppc_grow_season_polyn,
ppc_surv_season_polyn,ppc_panic_season,
ppc_flow_season_polyn,ppc_panic_season_polyn,cols=2)
dev.off()
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPC.pdf",useDingbats = F,height=9,width=6)
multiplot(ppc_surv_season,ppc_grow_season,
ppc_flow_season,ppc_panic_season,
ppc_surv_season_polyn,ppc_grow_season_polyn,
ppc_flow_season_polyn,ppc_panic_season_polyn,cols=2)
dev.off()
ppc_dens_overlay(poar_sites_season.grow$y_g, y_gs_sim)+
xlab("Growth status")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none")+theme_bw()->ppc_grow_season
ppc_dens_overlay(poar_sites_season.grow$y_g, y_gps_sim)+
xlab("Growth status")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none")+theme_bw()->ppc_grow_season_polyn
# print figure
# pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPCGrowth.pdf",useDingbats = F,height=7,width=6)
# multiplot(ppc_grow_annual,ppc_grow_annualpolyn,ppc_grow_season,
#           ppc_grow_season_polyn,cols=2)
# dev.off()
ppc_dens_overlay(poar_sites_season.flow$y_f, y_fs_sim)+
xlab("")+ylab("Density")+
ggtitle(("Seasonal"))+theme(legend.position = "none")+theme_bw()->ppc_flow_season
ppc_dens_overlay(poar_sites_season.flow$y_f, y_fps_sim)+
xlab("")+ylab("Density")+
ggtitle(("Seasonal Polynomial"))+theme(legend.position = "none")+theme_bw()->ppc_flow_season_polyn
#print figure
# pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPCFlowering.pdf",useDingbats = F,height=7,width=6)
# multiplot(ppc_flow_annual,ppc_flow_annualpolyn,ppc_flow_season,
#           ppc_flow_season_polyn,cols=2)
# dev.off()
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none")+theme_bw()->ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_pps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none")+theme_bw()->ppc_panic_season_polyn
# print figure
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPC.pdf",useDingbats = F,height=9,width=6)
multiplot(ppc_surv_season,ppc_grow_season,
ppc_flow_season,ppc_panic_season,
ppc_surv_season_polyn,ppc_grow_season_polyn,
ppc_flow_season_polyn,ppc_panic_season_polyn,cols=2)
dev.off()
ppc_dens_overlay(poar_sites_season.flow$y_f, y_fs_sim)+
xlab("Flowering status")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none")+theme_bw()->ppc_flow_season
ppc_dens_overlay(poar_sites_season.flow$y_f, y_fps_sim)+
xlab("Flowering status")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none")+theme_bw()->ppc_flow_season_polyn
#print figure
# pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPCFlowering.pdf",useDingbats = F,height=7,width=6)
# multiplot(ppc_flow_annual,ppc_flow_annualpolyn,ppc_flow_season,
#           ppc_flow_season_polyn,cols=2)
# dev.off()
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none")+theme_bw()->ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_pps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none")+theme_bw()->ppc_panic_season_polyn
# print figure
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPC.pdf",useDingbats = F,height=9,width=6)
multiplot(ppc_surv_season,ppc_grow_season,
ppc_flow_season,ppc_panic_season,
ppc_surv_season_polyn,ppc_grow_season_polyn,
ppc_flow_season_polyn,ppc_panic_season_polyn,cols=2)
dev.off()
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Figures/PPC.pdf",useDingbats = F,height=7,width=6)
multiplot(ppc_surv_season,ppc_grow_season,
ppc_flow_season,ppc_panic_season,
ppc_surv_season_polyn,ppc_grow_season_polyn,
ppc_flow_season_polyn,ppc_panic_season_polyn,cols=2)
dev.off()
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle((""))+theme(legend.position = "none",plot.title = element_text(size = 5))+theme_bw()->ppc_panic_season
ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("Seasonl linear"))+theme(legend.position = "none",plot.title = element_text(size = 5))+theme_bw()->ppc_panic_season
ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear"))+theme(legend.position = "none",plot.title = element_text(size = 5))+theme_bw()->ppc_panic_season
ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear"))+theme(legend.position = "none",plot.title = element_text(size = 1))+theme_bw()->ppc_panic_season
ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear"))+theme(legend.position = "none",plot.title = element_text(size = 40))+theme_bw()->ppc_panic_season
ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear"))+theme(legend.position = "none",plot.title = element_text(size = 40,hjust = 0.5))+theme_bw()->ppc_panic_season
ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear")) +
theme(legend.position = "none",plot.title = element_text(size = 40)) +
ggeasy::easy_center_title()+
theme_bw()->ppc_panic_season
install.packages("ggeasy")
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear")) +
theme(legend.position = "none",plot.title = element_text(size = 40)) +
ggeasy::easy_center_title()+
theme_bw()->ppc_panic_season
ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear")) +
ggeasy::easy_center_title()
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear")) +
ggeasy::easy_center_title()+
theme_bw()->ppc_panic_season
ppc_panic_season
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear")) +
theme_bw()
ppc_dens_overlay(poar_sites_season.panic$y_p, y_ps_sim)+
xlab("Number of panicles")+ylab("Density")+
ggtitle(("linear")) +
ggeasy::easy_center_title()+
theme_bw()->ppc_panic_season
ppc_panic_season
#read the shapefile of the study area
states_shape <- map_data("state")
library(ggmap)
#read the shapefile of the study area
states_shape <- map_data("state")
tm_shape(states_shape)
library(tmap)
library(sf)
library(tidyverse)
library(geojsonio)
library(sp)
library(rgeos)
library(ggmap)
#read the shapefile of the study area
states_shape <- map_data("state")
tm_shape(states_shape)
class(states_shape)
states_shape
#read the shapefile of the study area
US <- sf::st_read("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/data/States_shapefile-shp/District.shp")
#read the shapefile of the study area
US <- sf::st_read("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/data/States_shapefile-shp/States_shapefile.shp")
plot(US)
plot(US$geometry)
plot(US$State_Code)
plot(US$geometry)
data(wrld_simpl)
names(wrld_simpl)
library(maptools)
#read the shapefile of the study area
data(wrld_simpl)
names(wrld_simpl)
USA <- subset(wrld_simpl, NAME=="United States")
plot(USA)
#read the shapefile of the study area
US = get_acs(
geography = "state",
variables = acs_vars,
geometry = TRUE,
output = "wide"
)
#read the shapefile of the study area
states_shape <- map_data("state")
US = states_shape %>% filter(!NAME %in% c("Alaska", "Hawaii", "Puerto Rico"))
states_shape
US = states_shape %>% filter(!region %in% c("Alaska", "Hawaii", "Puerto Rico"))
ggplot()+
geom_map(data = US, map = US, aes(long, lat, map_id = region))
## #############################################################################
## Project: Anthropogenic disturbance alters Khaya senegalensis’ trade-off between physical, biological, and chemical defense and investment
## AUTHORS: Jacob Moutouama
## DATE LAST MODIFIED: 18122023
## #############################################################################
# remove objects and clear workspace
rm(list = ls(all = TRUE))
# Load packages
if (!require(tidyverse)) {
install.packages('tidyverse') # for data cleaning
library('tidyverse')
}
if (!require(lme4)) {
install.packages('lme4') # for mixed effect models
library('lme4')
}
if (!require(nlme)) {
install.packages('nlme') # for mixed effect models
library('nlme')
}
if (!require(glmmTMB)) {
install.packages('glmmTMB') # for mixed effect models with zero inflated distribution
library('glmmTMB')
}
if (!require(bbmle)) {
install.packages('bbmle') # for AIC comparaison between models
library('bbmle')
}
# Import your data
datasus<-read.csv("/Users/User/Desktop/-/Fall 2023 Courses/Indep study/data and analysis/datagrowthdefense.csv",header=T)
# Import your data
datasus<-read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Susanna Anita Analysis/data/datagrowthdefense.csv",header=T)
str(datasus)
datasus$total_phenol<-as.numeric(datasus$total_phenol)
datasus$Fr13<-as.numeric(datasus$Fr13)
summary(datasus)
hist(datasus$Dbh14)
# hist(log(datasus$Dbh14))
# datasus$RGR<-(datasus$Dbh14-datasus$Diameter13)/datasus$Diameter13
datasus$RGR<-log(datasus$Dbh14/datasus$Diameter13) # create a new variable, growth
datasus$lived14<-as.factor(1*(!is.na(datasus$Diameter13) & !is.na(datasus$Dbh14))) # Creating a new variable in "dat' for survival in 14
# H1: Size dependent (ontogenetic) investment in defense ------
## Nest vs size ----
modnestsize_zinbinom1 <- glmmTMB(Nest_average ~ Dbh14*Harvest + (1|Population), data = datasus,na.action = na.omit, ziformula = ~1,control=glmmTMBControl(optimizer=optim,
optArgs=list(method="BFGS")), family = nbinom1)
gfg_data = data.frame(x1 = c(1, 2, 3, 4, 5),
x2 = c(8, 4, 5, 1, 2),
x3 = c(7, 9, 1, 2, 7))
colMeans(gfg_data)
gfg_data
