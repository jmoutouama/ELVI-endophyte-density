databuncp %>%
filter(Kingdom == "Animal")->databa
databuncpgeLS<-left_join(x=datgencp,y=datageclean,by="Species")
databuncpgeLS
datgencp
databa
databuncpgeLS
class(databuncpgeLS$Species)
class(datageclean$Species)
databuncpgeLS$Species
datageclean$Species
intersect(databuncpgeLS$Species,datageclean$Species)
rm(list = ls(all = TRUE))
# Load the required packages
library(taxize)
library(ape)
library(phytools)
library(ade4)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidytree)
library(aplot)
library(cowplot)
library(ggpubr)
library(ggsci)
library(R.rsp)
library(flextable)
library(effectsize)
library(metafor)
library(esc)
library(knitr)
library(tidyverse)
library(brms)
library(coda)
library(modelr)
library(gridExtra)
library(pBrackets)
library(performance)
library(kableExtra)
library(tidybayes)
library(formattable)
library(grid)
library(rstan)
library(bayesplot)
set.seed(13)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
Ftable <- function(model, reorder = F, order, percent = F){
table <- summary(model)$fixed
table2 <-summary(model, prob = 0.9)$fixed %>% as_tibble()
names <- rownames(table)
table <- table %>%
as_tibble() %>%
dplyr::rename('L95%CL' = `l-95% CI`, 'U95%CL' = `u-95% CI`) %>%
select(-Rhat, -Bulk_ESS, -Tail_ESS)
table$`L90%CL` <- table2$`l-90% CI`
table$`U90%CL` <- table2$`u-90% CI`
table <-table %>%
mutate(Estimate = ifelse(`L95%CL`	* `U95%CL` > 0,
paste(sprintf('%.3f', round(Estimate, 3)),  '*', sep = ''),
ifelse(`L90%CL`	* `U90%CL` > 0,
paste(sprintf('%.3f', round(Estimate, 3)), '\206', sep = ''), round(Estimate, 3))),
rowname = names) %>%
dplyr::rename('SE    ' = Est.Error)  %>%
column_to_rownames(var = 'rowname')
if (reorder == T){
table <- table[order,]
}
table <- table %>%
kable(digits = 3, escape = F, table.attr = "style = \"color: black;\"") %>%
kable_styling(position = "left")
return(table)
}
theme <-  theme(panel.background = element_blank(),
panel.border = element_rect(fill = NA),
strip.background = element_blank(),
axis.text.x = element_text(size = 10, colour = 'black'),
axis.text.y = element_text(size = 10, colour = 'black'),
#text        = element_text(size = 8),
axis.title.y = element_text(size = 10),# size of y lab
axis.title.x = element_text(size = 10),# size of X lab
legend.position     = "none",
legend.title        = element_text(size = 9),
legend.text         = element_text(size = 8),
legend.key.height   = unit(0.8,'line'),
legend.background   = element_blank(),
legend.key          = element_rect(colour = NA, fill = NA),
plot.title  = element_text(hjust = 0.5),
plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = "cm"))
Lambdacp <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/Lambda.csv", header = T)
datlambdacp <- escalc("SMDH", m1i = mcenter, m2i = mperiphery, sd1i = sdcenter, sd2i = sdperiphery, n1i = ncenter, n2i = nperiphery, slab = Author, data = Lambdacp)
Lambdar <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/Lambdar.csv", header = T)
datlambda<-rbind(datlambdacp,Lambdar)
datlambda$se<-sqrt(datlambda$vi)
datlambda$ID<-as.factor(datlambda$ID)
datlambda$Species
library(stringr)
str_count(datlambda$Species," ")
gencp <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/genetic.csv", header = T)
genr <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/geneticr.csv", header = T)
datgen <- escalc("SMDH", m1i = mcenter, m2i = mperiphery, sd1i = sdcenter, sd2i = sdperiphery, n1i = ncenter, n2i = nperiphery, slab = Author, data = gencp)
datgencp<-rbind(datgen,genr)
datgencp <- datgen[!apply(datgen[,c("yi", "vi")], 1, anyNA),]
datgencp$se<-sqrt(datgencp$vi)
datgencp$ID<-as.factor(datgencp$ID)
#str(datgencp)
str_count(datgencp$Species," ")
str_replace(datgencp$Species,"  "," ")
str_count(datgencp$Species," ")
datgencp$Species<-str_squish(datgencp$Species)
str_count(datgencp$Species," ")
datgencp$Species
datgencp %>%
filter(Kingdom=="Plant")->datgenp
datgencp %>%
filter(Kingdom=="Animal")->datgena
sp.genp <- datgenp[, 5]
spnamesp <- as.character(sp.genp)
# Retrieve classifications
resolved_namesp <- classification(spnamesp, db = "ncbi")
resolved_namesp <- unique(resolved_namesp)
# Building a phylogenetic tree
genptree <- class2tree(resolved_namesp)
#str(gentree)
(genpphy <- genptree$phylo)
plot(genpphy)
datgenp %>%
group_by(Species) %>%
summarise(mean_yi= mean(yi),var_yi=mean(vi))->datgenpphylo
datgenpphylo$Species <- genpphy$tip.label
genpcleanTree<-drop.tip(genpphy, genpphy$tip.label[-na.omit(match(datgenpphylo$Species, genpphy$tip.label))])
# plot(genpcleanTree,type = "fan")
(Pop.genp <- phylosig(genpcleanTree,
datgenpphylo$mean_yi,
method = "K", test = TRUE
))
(Pop.genp <- phylosig(genpcleanTree,
datgenpphylo$mean_yi,
method = "lambda", test = TRUE
))
sp.gena <- datgena[, 5]
spnamesa <- as.character(sp.gena)
# Retrieve classifications
resolved_namesa <- classification(spnamesa, db = "ncbi")
resolved_namesa <- unique(resolved_namesa)
lapply(resolved_namesa, head)
# Building a phylogenetic tree
genatree <- class2tree(resolved_namesa)
#str(gentree)
(genaphy <- genatree$phylo)
plot(genaphy)
datgena$Species <- genaphy$tip.label
genacleanTree<-drop.tip(genaphy, genaphy$tip.label[-na.omit(match(datgena$Species, genaphy$tip.label))])
# length(genacleanTree$tip.label)
# plot(genacleanTree)
(Pop.gena <- phylosig(genacleanTree,
datgena$yi,
method = "K", test = TRUE
))
(Pop.gena <- phylosig(genacleanTree,
datgena$yi,
method = "lambda", test = TRUE
))
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
genamodel <- brm(
yi | se(se,sigma=TRUE) ~ 1 + # allow both sampling error and residuals
(1 | ID) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
prior = priors,
iter = 5000, cores = 4,warmup = 1000,
data = datgencp
)
plot(genamodel)
genamodel %>% Ftable(percent = T)
#get_variables(Lambdamodel)
post.samples_gen <- posterior_samples(genamodel, pars="^b_Intercept")
mean(post.samples_gen$b_Intercept>0)
smd.ecdf_gen <- ecdf(post.samples_gen$b_Intercept)
smd.ecdf_gen(0)
Abundcp <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/Abundance.csv", header = T)
Abundcp$Species<-gsub("spp.","",as.character(Abundcp$Species))
Abundcp$Species<-gsub("sp.","",as.character(Abundcp$Species))
databun <- escalc("ZCOR", ri = correlation.coefficient, ni = sample_size, data = Abundcp)
Abundcp <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/Abundancez.csv", header = T)
databuncp<-rbind(databun,Abundcp)
databuncp<-databun[!apply(databun[,c("yi", "vi")], 1, anyNA),]
databuncp$se<-sqrt(databuncp$vi)
databuncp$ID<-as.factor(databuncp$ID)
str_count(databuncp$Species," ")
databuncp$Species<-str_squish(databuncp$Species)
str_count(databuncp$Species," ")
databuncp %>%
filter(Kingdom=="Plant")->databuncp_plant
sp.ab.plant <- databuncp_plant[, 5]
spnames.ab.plant <- as.character(sp.ab.plant)
species2 <- unique(spnames.ab.plant)
#length(species2)
# species2 <- gsub("\n", "", species1)
temp <-taxize::gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat_abp <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
spnamesabp <-dat_abp[,2]
spnamesabp <- spnamesabp[complete.cases(spnamesabp)]
# length(spnamesabgdp)
# Retrieve classifications
spnamesabpf <- classification(spnamesabp, db = "ncbi")
sp.ab.plant <- databuncp_plant[, 5]
spnames.ab.plant <- as.character(sp.ab.plant)
species2 <- unique(spnames.ab.plant)
temp <-taxize::gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat_abp <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
spnamesabp <-dat_abp[,2]
spnamesabp <- spnamesabp[complete.cases(spnamesabp)]
# Retrieve classifications
spnamesabpf <- classification(spnamesabp, db = "ncbi")
resolved_names_abp <- unique(spnamesabpf)
# lapply(resolved_names_abgdp, head)
resolved_names_abp <- unique(resolved_names_abp)
# Building a phylogenetic tree
abptree <- class2tree(resolved_names_abp)
# str(abptree)
(abpphy <- abptree$phylo)
plot(abpphy,type="fan",cex=0.4)
databps<-databuncp_plant %>%
group_by(Species) %>%
summarise(mean_efs=mean(yi,na.rm=TRUE),var_efs=mean(vi,na.rm=TRUE))
fispeciesp<-data_frame(Species=abpphy$tip.label)
fdatabps<- merge(x = fispeciesp, y = databps,all.x = TRUE)
fdatabps<-fdatabps[complete.cases(fdatabps), ]
abpcleanTree<-drop.tip(abpphy, abpphy$tip.label[-na.omit(match(fdatabps$Species, abpphy$tip.label))])
plot(abpcleanTree,type="fan",cex=0.4)
(Pop.Kp <- phylosig(abpcleanTree,
fdatabps$mean_efs,
method = "K", test = TRUE
))
(Pop.gdp <- phylosig(abpcleanTree,
fdatabps$mean_efs,
method = "lambda", test = TRUE
))
databuncp %>%
filter(Kingdom=="Animal")->databuncp_animal
sp.aba <- databuncp_animal[, 5]
spnamesaba <- as.character(sp.aba)
species2 <- unique(spnamesaba)
#length(species2)
# species2 <- gsub("\n", "", species1)
temp <-taxize::gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat_aba <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
spnamesaba <-dat_aba[,2]
spnamesaba <- spnamesaba[complete.cases(spnamesaba)]
# length(spnamesabgda)
# Retrieve classifications
spnamesabaf <- classification(spnamesaba, db = "ncbi")
# length(spnamesabgda)
# Retrieve classifications
spnamesabaf <- classification(spnamesaba, db = "ncbi")
(Pop.gena <- phylosig(genacleanTree,
datgena$yi,
method = "K", test = TRUE
))
(Pop.genp <- phylosig(genpcleanTree,
datgenpphylo$mean_yi,
method = "K", test = TRUE
))
(Pop.genp <- phylosig(genpcleanTree,
datgenpphylo$mean_yi,
method = "lambda", test = TRUE
))
# Retrieve classifications
spnamesabpf <- classification(spnamesabp, db = "ncbi")
# Retrieve classifications
spnamesabpf <- classification(spnamesabp, db = "ncbi")
resolved_names_abp <- unique(spnamesabpf)
# lapply(resolved_names_abgdp, head)
resolved_names_abp <- unique(resolved_names_abp)
# Building a phylogenetic tree
abptree <- class2tree(resolved_names_abp)
# str(abptree)
(abpphy <- abptree$phylo)
plot(abpphy,type="fan",cex=0.4)
databps<-databuncp_plant %>%
group_by(Species) %>%
summarise(mean_efs=mean(yi,na.rm=TRUE),var_efs=mean(vi,na.rm=TRUE))
fispeciesp<-data_frame(Species=abpphy$tip.label)
fdatabps<- merge(x = fispeciesp, y = databps,all.x = TRUE)
fdatabps<-fdatabps[complete.cases(fdatabps), ]
abpcleanTree<-drop.tip(abpphy, abpphy$tip.label[-na.omit(match(fdatabps$Species, abpphy$tip.label))])
plot(abpcleanTree,type="fan",cex=0.4)
(Pop.Kp <- phylosig(abpcleanTree,
fdatabps$mean_efs,
method = "K", test = TRUE
))
(Pop.gdp <- phylosig(abpcleanTree,
fdatabps$mean_efs,
method = "lambda", test = TRUE
))
databuncp %>%
filter(Kingdom=="Animal")->databuncp_animal
sp.aba <- databuncp_animal[, 5]
spnamesaba <- as.character(sp.aba)
species2 <- unique(spnamesaba)
temp <-taxize::gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat_aba <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
spnamesaba <-dat_aba[,2]
spnamesaba <- spnamesaba[complete.cases(spnamesaba)]
# Retrieve classifications
spnamesabaf <- classification(spnamesaba, db = "ncbi")
resolved_names_aba <- unique(spnamesabaf)
# Retrieve classifications
spnamesabaf <- classification(spnamesaba, db = "ncbi")
resolved_names_aba <- unique(spnamesabaf)
# lapply(resolved_names_abgda, head)
# Building a phylogenetic tree
abatree <- class2tree(resolved_names_aba)
# str(abptree)
(abaphy <- abatree$phylo)
plot(abaphy,type="fan",cex=0.4)
databas<-databuncp_animal %>%
group_by(Species) %>%
summarise(mean_efs=mean(yi,na.rm=TRUE),var_efs=mean(vi,na.rm=TRUE))
fispeciesa<-data_frame(Species=abaphy$tip.label)
fdatabas<- merge(x = fispeciesa, y = databas,all.x = TRUE)
fdatabas<-fdatabas[complete.cases(fdatabas), ]
abacleanTree<-drop.tip(abaphy, abaphy$tip.label[-na.omit(match(fdatabas$Species, abaphy$tip.label))])
(Pop.Ka <- phylosig(abacleanTree,
fdatabas$mean_efs,
method = "K", test = TRUE
))
(Pop.a <- phylosig(abacleanTree,
fdatabas$mean_efs,
method = "lambda", test = TRUE
))
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
abunmodel <- brm(
yi | se(se, sigma = TRUE) ~ 1 + (1 | ID) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
prior = priors,iter = 5000, cores = 4,warmup = 1000,
data = databuncp
)
pp_check(abunmodel)+
xlab("Abundance")+
ylab("Density")+
ylim(0,3)+
theme(legend.position.inside =  c(2, .3))+
theme_bw()->ppc_abundance
plot(abunmodel)
abunmodel %>% Ftable(percent = T)
# I^2 and lambda
I_square_abun <- hypothesis(var_samp_abun, c('ID/total_var= 0',
'Species/total_var = 0',
'sigma/total_var = 0'))$hypothesis %>%
as_tibble() %>%
select(-Evid.Ratio, -Post.Prob, -Star)
var_abun <- sum(1/databuncp$vi)*(nrow(databuncp)-1)/((sum(1/databuncp$vi))^2-sum((1/databuncp$vi)^2))
var_samp_abun <- abunmodel %>%
posterior_samples() %>%
select(starts_with('sd'), sigma) %>%
transmute_all(.funs = list(sq = ~(. ^ 2))) %>% # sd to variance
mutate(sampling = var_abun) %>%  # sampling variance
mutate(total_var = rowSums(.),
no_sample = total_var - sampling)
colnames(var_samp_abun) <- colnames(var_samp_abun) %>%
str_remove_all('__Intercept|_sq|sd_')
# I^2 and lambda
I_square_abun <- hypothesis(var_samp_abun, c('ID/total_var= 0',
'Species/total_var = 0',
'sigma/total_var = 0'))$hypothesis %>%
as_tibble() %>%
select(-Evid.Ratio, -Post.Prob, -Star)
I_square_abun[,1] <- c('ID','Species', 'sigma')
colnames(I_square_abun) <- c('', 'Estimate', 'SE', 'L95%CL', 'U95%CL')
I_square_abun <- I_square_abun %>%
kable(digits = 4, escape = F, table.attr = "style = \"color: black;\"") %>%
kable_styling()
I_square_abun
#get_variables(Lambdamodel)
post.samples_ab <- posterior_samples(abunmodel, pars="^b_Intercept")
mean(post.samples_ab$b_Intercept>0)
smd.ecdf_ab <- ecdf(post.samples_ab$b_Intercept)
smd.ecdf_ab(0)
# We see that with 00.68%, the probability of our pooled effect being smaller than 20 is high
I_square_abun
pp_check(genamodel)+
xlab("Genetic diversity")+ylab("Density")+
xlim(-10,10)+
ylim(0,0.5)+
theme(legend.position.inside =  c(2, .3))+
theme_bw()->ppc_genetic
var_gen <- sum(1/datgencp$vi)*(nrow(datgencp)-1)/((sum(1/datgencp$vi))^2-sum((1/datgencp$vi)^2))
var_samp_gen <- genamodel %>%
posterior_samples() %>%
select(starts_with('sd'), sigma) %>%
transmute_all(.funs = list(sq = ~(. ^ 2))) %>% # sd to variance
mutate(sampling = var_gen) %>%  # sampling variance
mutate(total_var = rowSums(.),
no_sample = total_var - sampling)
colnames(var_samp_gen) <- colnames(var_samp_gen) %>%
str_remove_all('__Intercept|_sq|sd_')
# I^2 and lambda
I_square_gen <- hypothesis(var_samp_gen, c(
'Species/total_var = 0',
'ID/total_var = 0',
'sigma/total_var = 0'))$hypothesis %>%
as_tibble() %>%
select(-Evid.Ratio, -Post.Prob, -Star)
I_square_gen[,1] <- c('Species', 'ID','sigma')
colnames(I_square_gen) <- c('', 'Estimate', 'SE', 'L95%CL', 'U95%CL')
I_square_gen <- I_square_gen %>%
kable(digits = 4, escape = F, table.attr = "style = \"color: black;\"") %>%
kable_styling()
I_square_gen
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
Lambdamodel <- brm(
yi | se(se,sigma=TRUE) ~ 1 + # allow both sampling error and residuals
(1 | ID) +  (1 | Species),
data = datlambda,
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
prior = priors,
iter = 5000, cores = 4,warmup = 1000
)
plot(Lambdamodel)
color_scheme_set("red")
pp_check(Lambdamodel)+
xlab("Growth rate")+
ylab("Density")+
xlim(-4,4)+
ylim(0,0.6)+
theme(legend.position.inside =  c(2, .3))+
theme_bw()->ppc_growthrate
Lambdamodel %>% Ftable(percent = T)
#get_variables(Lambdamodel)
post.samples_lambda <- posterior_samples(Lambdamodel, pars="^b_Intercept")
mean(post.samples_lambda$b_Intercept>0)
smd.ecdf_lambda <- ecdf(post.samples_lambda$b_Intercept)
smd.ecdf_lambda(0)
# We see that with 10.7%, the probability of our pooled effect being smaller than 0 is high.
var_lambda <- sum(1/datlambda$vi)*(nrow(datlambda)-1)/((sum(1/datlambda$vi))^2-sum((1/datlambda$vi)^2))
var_samp_lambda <- Lambdamodel %>%
posterior_samples() %>%
select(starts_with('sd'), sigma) %>%
transmute_all(.funs = list(sq = ~(. ^ 2))) %>% # sd to variance
mutate(sampling = var_lambda) %>%  # sampling variance
mutate(total_var = rowSums(.),
no_sample = total_var - sampling)
colnames(var_samp_lambda) <- colnames(var_samp_lambda) %>%
str_remove_all('__Intercept|_sq|sd_')
# I^2 and lambda
I_square_lambda <- hypothesis(var_samp_lambda, c('ID/total_var= 0',
'Species/total_var = 0',
'sigma/total_var = 0'))$hypothesis %>%
as_tibble() %>%
select(-Evid.Ratio, -Post.Prob, -Star)
I_square_lambda[,1] <- c('ID', 'Species','Observation') #'Total heterogeneity',
colnames(I_square_lambda) <- c('', 'Estimate', 'SE', 'L95%CL', 'U95%CL')
I_square_lambda <- I_square_lambda %>%
kable(digits = 4, escape = F, table.attr = "style = \"color: black;\"") %>%
kable_styling()
I_square_lambda
var_gen <- sum(1/datgencp$vi)*(nrow(datgencp)-1)/((sum(1/datgencp$vi))^2-sum((1/datgencp$vi)^2))
var_samp_gen <- genamodel %>%
posterior_samples() %>%
select(starts_with('sd'), sigma) %>%
transmute_all(.funs = list(sq = ~(. ^ 2))) %>% # sd to variance
mutate(sampling = var_gen) %>%  # sampling variance
mutate(total_var = rowSums(.),
no_sample = total_var - sampling)
colnames(var_samp_gen) <- colnames(var_samp_gen) %>%
str_remove_all('__Intercept|_sq|sd_')
# I^2 and lambda
I_square_gen <- hypothesis(var_samp_gen, c(
'Species/total_var = 0',
'ID/total_var = 0',
'sigma/total_var = 0'))$hypothesis %>%
as_tibble() %>%
select(-Evid.Ratio, -Post.Prob, -Star)
I_square_gen[,1] <- c('Species', 'ID','sigma')
colnames(I_square_gen) <- c('', 'Estimate', 'SE', 'L95%CL', 'U95%CL')
I_square_gen <- I_square_gen %>%
kable(digits = 4, escape = F, table.attr = "style = \"color: black;\"") %>%
kable_styling()
I_square_gen
databuncp %>%
filter(Author != "Dallas et al.")->AbundcpDallas
AbundcpDallas$Species<-gsub("spp.","",as.character(AbundcpDallas$Species))
AbundcpDallas$Species<-gsub("sp.","",as.character(AbundcpDallas$Species))
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
abunmodelDallas <- brm(
yi | se(se, sigma = TRUE) ~ 1 + (1 | ID) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
prior = priors,iter = 5000, cores = 4,warmup = 1000,
data = databuncpDallas
)
AbundcpDallas
databuncp %>%
filter(Author != "Dallas et al.")->AbundcpDallas
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
abunmodelDallas <- brm(
yi | se(se, sigma = TRUE) ~ 1 + (1 | ID) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
prior = priors,iter = 5000, cores = 4,warmup = 1000,
data = AbundcpDallas
)
