iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
log_lik_grow_temp_mean <- loo::extract_log_lik(fit_allsites_grow_temp_mean, merge_chains = FALSE)
## Model comparison based on epdl/looic
log_lik_surv_temp_mean <- loo::extract_log_lik(fit_allsites_surv_temp_mean, merge_chains = FALSE)
r_eff_surv_temp_mean <- loo::relative_eff(exp(log_lik_surv_temp_mean))
loo_surv_temp_mean <- loo(log_lik_surv_temp_mean, r_eff = r_eff_surv_temp_mean, cores = 1)
plot(loo_surv_temp_mean)
## Growth----
## Read and format the growth data to build the model
#hist(demography_climate_elvi$grow)
demography_climate_elvi %>%
subset( tiller_t > 0 & tiller_t1 > 0)%>%
dplyr::select(year, Population, Site, Plot,site_plot, Endo, Herbivory,
tiller_t, grow,temp_mean,temp_cv,water_mean,water_cv)%>%
na.omit %>%
mutate( Site= Site %>% as.factor %>% as.numeric,
Plot = Plot %>% as.factor %>% as.numeric,
site_plot=site_plot %>% as.factor %>% as.numeric,
Endo = Endo %>% as.factor %>% as.numeric,
Herbivory=Herbivory %>% as.factor %>% as.numeric,
Population = Population %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0 = log(tiller_t),
grow_t1=grow,
log_temp_mean = log(temp_mean),
log_temp_cv = log(temp_cv),
log_water_mean = log(water_mean),
log_water_cv = log(water_cv))->demography_climate_elvi_grow
## Separate each variable to use the same model stan
data_sites_grow_temp_mean <- list( n_sites    = demography_climate_elvi_grow$Site %>% n_distinct,
n_pops  = demography_climate_elvi_grow$Population %>% n_distinct(),
# survival data
n_plot_g = demography_climate_elvi_grow$Plot %>% n_distinct,
site_g   = demography_climate_elvi_grow$Site,
pop_g =  demography_climate_elvi_grow$Population,
plot_g  = demography_climate_elvi_grow$Plot,
temp_g=as.vector(demography_climate_elvi_grow$log_temp_mean),
endo_g  = demography_climate_elvi_grow$Endo-1,
herb_g  = demography_climate_elvi_grow$Herbivory-1,
size_g   = demography_climate_elvi_grow$log_size_t0,
y_g      = demography_climate_elvi_grow$grow_t1,
n_g      = nrow(demography_climate_elvi_grow))
demography_climate_elvi_surv
demography_climate_elvi
names(demography_climate_elvi_grow)
# summary(data_sites_grow_temp_mean$y_g)
data_sites_grow_temp_cv <- list( n_sites    = demography_climate_elvi_grow$Site %>% n_distinct,
n_pops  = demography_climate_elvi_grow$Population %>% n_distinct(),
# survival data
n_plot_g = demography_climate_elvi_grow$Plot %>% n_distinct,
site_g   = demography_climate_elvi_grow$Site,
pop_g =  demography_climate_elvi_grow$Population,
plot_g  = demography_climate_elvi_grow$Plot,
temp_g=as.vector(demography_climate_elvi_grow$log_temp_cv),
endo_g  = demography_climate_elvi_grow$Endo-1,
herb_g  = demography_climate_elvi_grow$Herbivory-1,
size_g   = demography_climate_elvi_grow$log_size_t0,
y_g      = demography_climate_elvi_grow$grow_t1,
n_g      = nrow(demography_climate_elvi_grow))
data_sites_grow_temp_cv
## Separate each variable to use the same model stan
data_sites_grow_temp_mean <- list( n_sites    = demography_climate_elvi_grow$Site %>% n_distinct,
n_pops  = demography_climate_elvi_grow$Population %>% n_distinct(),
# survival data
n_plot_g = demography_climate_elvi_grow$Plot %>% n_distinct,
site_g   = demography_climate_elvi_grow$Site,
pop_g =  demography_climate_elvi_grow$Population,
plot_g  = demography_climate_elvi_grow$Plot,
temp_g=as.vector(demography_climate_elvi_grow$log_temp_mean),
endo_g  = demography_climate_elvi_grow$Endo-1,
herb_g  = demography_climate_elvi_grow$Herbivory-1,
size_g   = demography_climate_elvi_grow$log_size_t0,
y_g      = demography_climate_elvi_grow$grow_t1,
n_g      = nrow(demography_climate_elvi_grow))
# summary(data_sites_grow_temp_mean$y_g)
data_sites_grow_temp_cv <- list( n_sites    = demography_climate_elvi_grow$Site %>% n_distinct,
n_pops  = demography_climate_elvi_grow$Population %>% n_distinct(),
# survival data
n_plot_g = demography_climate_elvi_grow$Plot %>% n_distinct,
site_g   = demography_climate_elvi_grow$Site,
pop_g =  demography_climate_elvi_grow$Population,
plot_g  = demography_climate_elvi_grow$Plot,
temp_g=as.vector(demography_climate_elvi_grow$log_temp_cv),
endo_g  = demography_climate_elvi_grow$Endo-1,
herb_g  = demography_climate_elvi_grow$Herbivory-1,
size_g   = demography_climate_elvi_grow$log_size_t0,
y_g      = demography_climate_elvi_grow$grow_t1,
n_g      = nrow(demography_climate_elvi_grow))
data_sites_surv_water_mean <- list( n_sites    = demography_climate_elvi_grow$Site %>% n_distinct,
n_pops  = demography_climate_elvi_grow$Population %>% n_distinct(),
# survival data
n_plot_g = demography_climate_elvi_grow$Plot %>% n_distinct,
site_g   = demography_climate_elvi_grow$Site,
pop_g =  demography_climate_elvi_grow$Population,
plot_g  = demography_climate_elvi_grow$Plot,
temp_g=as.vector(demography_climate_elvi_grow$water_mean),
endo_g  = demography_climate_elvi_grow$Endo-1,
herb_g  = demography_climate_elvi_grow$Herbivory-1,
size_g   = demography_climate_elvi_grow$log_size_t0,
y_g      = demography_climate_elvi_grow$grow_t1,
n_g      = nrow(demography_climate_elvi_grow))
data_sites_surv_water_cv <- list( n_sites    = demography_climate_elvi_grow$Site %>% n_distinct,
n_pops  = demography_climate_elvi_grow$Population %>% n_distinct(),
# survival data
n_plot_g = demography_climate_elvi_grow$Plot %>% n_distinct,
site_g   = demography_climate_elvi_grow$Site,
pop_g =  demography_climate_elvi_grow$Population,
plot_g  = demography_climate_elvi_grow$Plot,
temp_g=as.vector(demography_climate_elvi_grow$water_cv),
endo_g  = demography_climate_elvi_grow$Endo-1,
herb_g  = demography_climate_elvi_grow$Herbivory-1,
size_g   = demography_climate_elvi_grow$log_size_t0,
y_g      = demography_climate_elvi_grow$grow_t1,
n_g      = nrow(demography_climate_elvi_grow))
data_sites_surv_water_cv
## Separate each variable to use the same model stan
data_sites_grow_temp_mean <- list( n_sites    = demography_climate_elvi_grow$Site %>% n_distinct,
n_pops  = demography_climate_elvi_grow$Population %>% n_distinct(),
# survival data
n_plot_g = demography_climate_elvi_grow$Plot %>% n_distinct,
site_g   = demography_climate_elvi_grow$Site,
pop_g =  demography_climate_elvi_grow$Population,
plot_g  = demography_climate_elvi_grow$Plot,
temp_g=as.vector(demography_climate_elvi_grow$log_temp_mean),
endo_g  = demography_climate_elvi_grow$Endo-1,
herb_g  = demography_climate_elvi_grow$Herbivory-1,
size_g   = demography_climate_elvi_grow$log_size_t0,
y_g      = demography_climate_elvi_grow$grow_t1,
n_g      = nrow(demography_climate_elvi_grow))
fit_allsites_grow_temp_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_growth.stan",
data = data_sites_grow_temp_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
traceplot(fit_allsites_grow_temp_mean,inc_warmup=TRUE, pars = quote_bare(b0_g,bendo_g,bherb_g,btemp_g,btemp_g,bendotemp_g,
bherbtemp_g,bendoherb_g))+theme_bw()
log_lik_grow_temp_mean <- loo::extract_log_lik(fit_allsites_grow_temp_mean, merge_chains = FALSE)
r_eff_grow_temp_mean <- loo::relative_eff(exp(log_lik_grow_temp_mean))
loo_grow_temp_mean <- loo(log_lik_grow_temp_mean, r_eff = r_eff_grow_temp_mean, cores = 1)
plot(loo_grow_temp_mean)
fit_allsites_surv_temp_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_temp_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
fit_allsites_surv_temp_cv <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_temp_cv,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
fit_allsites_surv_water_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_water_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
fit_allsites_surv_water_cv <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_water_cv,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
fit_allsites_surv_water_mean
data_sites_surv_water_mean
data_sites_surv_water_mean
rm(list = ls())
rm(list = ls())
library(rstan)
# set rstan options
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
set.seed(13)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7 -mtune=corei7')
options(tidyverse.quiet = TRUE)
library(tidyverse)
options(dplyr.summarise.inform = FALSE)
library(bayesplot)
# install.packages("countreg",repos = "http://R-Forge.R-project.org")
#library(countreg)
library(rmutil)
library(actuar)
#library(SPEI)
library(LaplacesDemon)
library(ggpubr)
library(raster)
library(rgdal)
library(readxl)
library(ggsci)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("scater")
# library(scater)
library(BiocManager)
library(swfscMisc)
# Define some basic functions that we'll use later
quote_bare <- function( ... ){
substitute( alist(...) ) %>%
eval( ) %>%
sapply(deparse )
}
invlogit<-function(x){exp(x)/(1+exp(x))}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
jacob_path<-"/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density"
# tom_path<-"C:/Users/tm9/Dropbox/github/ELVI-endophyte-density"
# HOBO data ----
## format date and separate year-month-day
choose_path<-jacob_path
list.files(path = paste0(choose_path,"/Data/HOBO data/"),
pattern = "*.xlsx", full.names = TRUE) %>% # Identify all excel files
lapply(read_excel) %>%                              # Store all files in list
bind_rows ->hobo_data_raw # get HOBO data
tidyr::separate(hobo_data_raw, "date",
into = c('longdate', 'time'),
sep= ' ') %>%
tidyr::separate('longdate', # Separate the ‘longdate’ column into separate columns for month, day and year using the separate() function.
into = c('year','month', 'day'),
sep= '-',
remove = FALSE)->hobo_data_full
## double check if the starting and ending dates are correct
hobo_data_full %>%
group_by(site) %>%
summarise(start=range(longdate)[1],
end=range(longdate)[2],
duration=as.Date(end)-as.Date(start))->hobo_dates
## average over days to look at overall trend across sites
hobo_data_full %>%
group_by(longdate,site,day) %>%
summarise(daily_mean_moist=mean(water),daily_mean_temp=mean(temperature))->HOBO_daily
## Plot the daily trend for temperature and soil moisture from start to end
hobo_means<-HOBO_daily %>%
group_by(site) %>%
summarise(mean_temp=mean(daily_mean_temp),
mean_moisture=mean(daily_mean_moist))
data_plotclim<-data.frame(site=c(HOBO_daily$site,HOBO_daily$site),daily_mean_clim=c(HOBO_daily$daily_mean_temp,HOBO_daily$daily_mean_moist),date=c(HOBO_daily$longdate,HOBO_daily$longdate),clim=c(rep("temp",nrow(HOBO_daily)),rep("water",nrow(HOBO_daily))))
site_names <- c("LAF"="Lafayette",
"HUN"="Huntville",
"BAS"="Bastrop",
"COL"="College Station",
"KER" ="Kerville",
"BFL" ="Brackenridge",
"SON"="Sonora")
figtempsite<-ggplot(HOBO_daily, aes(x=as.Date(longdate, format= "%Y - %m - %d"), y=daily_mean_temp))+
geom_line(aes(colour=site))+
ggtitle("a")+
scale_fill_jco()+
theme_bw()+
theme(legend.position = "none",
axis.text.x = element_text(size=4.5,color="black", angle=0))+
labs( y="Daily temperature  (°C)", x="")+
# facet_grid(~factor(site,levels=c("LAF", "HUN", "BAS", "COL" ,"KER" ,"BLF", "SON")))+
facet_grid(~site,labeller = labeller(site=site_names))+
geom_hline(data=hobo_means,aes(yintercept = mean_temp,colour=site))
figmoistsite<-ggplot(HOBO_daily, aes(x=as.Date(longdate, format= "%Y - %m - %d"), y=daily_mean_moist))+
geom_line(aes(colour=site))+
ggtitle("b")+
scale_fill_jco()+
theme_bw()+
theme(legend.position = "none",
axis.text.x = element_text(size=4.55, color="black",angle=0))+
labs( y="Daily soil moisture (wfv)", x="Month")+
facet_grid(~site,labeller = labeller(site=site_names))+
geom_hline(data=hobo_means,aes(yintercept = mean_moisture,colour=site))
# pdf("paste0(choose_path/Figure/climatesite.pdf",height =5,width =12,useDingbats = F)
# (Figclimatesite<-ggpubr::ggarrange(figtempsite,figmoistsite,common.legend = FALSE,ncol = 1, nrow = 2))
# dev.off()
## Average over days
HOBO_daily %>%
group_by(site)%>%
summarise(water_mean = mean(daily_mean_moist),
water_cv=sd(daily_mean_moist)/water_mean,
temp_mean = mean(daily_mean_temp),
temp_cv=sd(daily_mean_temp)/temp_mean) %>%
left_join(.,hobo_dates,by=c("site"))->HOBO_summary
# Demographic data -----
# Merge the demographic with the climatic data
datini<-read_csv(paste0(choose_path,"/Data/Initialdata.csv"))
dat23<-read_csv(paste0(choose_path,"/Data/census2023.csv"))
dat24<-read_csv(paste0(choose_path,"/Data/census2024.csv"))
datherbivory<-read_csv(paste0(choose_path,"/Data/herbivory.csv"))
# calculate the total spikelet for each census
dat23 %>%
mutate(Spikelet_23=rowSums(across(Spikelet_A:Spikelet_C)))->dat23_spike
dat24 %>%
mutate(Spikelet_24=rowSums(across(Spikelet_A:Spikelet_C)),Inf_24=rowSums(across(attachedInf_24:brokenInf_24)))->dat24_spike_inf
## Merge the initial data with the 23 data and the 23 data with the 24 -----
datini23 <- left_join(x = datini,y =dat23_spike,by=c("Tag_ID"))
datini23 %>%
mutate(tiller_t=ini_Tiller,
tiller_t1=Tiller_23,
inf_t1=Inf_23,
spikelet_t1=Spikelet_23,
year=c(rep(2023,nrow(datini23)))) %>%
dplyr::select(Site,
Species,
Plot,
Position,
Tag_ID,
Population,
Clone,
GreenhouseID,
Endo,
tiller_t,
tiller_t1,
inf_t1,
spikelet_t1,
tiller_Herb,
year)->datini23_t_t1
dat2324 <- left_join(x = datini23 ,y =dat24_spike_inf,by=c("Tag_ID"))
dat2324 %>%
mutate(tiller_t=Tiller_23,
tiller_t1=Tiller_24,
inf_t1=Inf_24,
spikelet_t1=Spikelet_24,
tiller_Herb=tiller_Herb.y,
year=c(rep(2024,nrow(dat2324)))) %>%
dplyr::select(Site,
Species,
Plot,
Position,
Tag_ID,
Population,
Clone,
GreenhouseID,
Endo,
tiller_t,
tiller_t1,
inf_t1,
spikelet_t1,
tiller_Herb,
year)->dat2324_t_t1
datdemo<-rbind(datini23_t_t1,dat2324_t_t1)
# names(datdemo)
# unique(datdemo$Species)
## Merge the demographic data with the herbivory data -----
demography<-left_join(x=datdemo,y=datherbivory,by=c("Site","Plot","Species"))# Merge the demographic data with the herbivory data
# view(demography)
# head(demography)
HOBO_summary %>%
rename(Site=site)->HOBO_summary_clean
## Merge the demographic data with the climatic data -----
demography_climate<-left_join(x=demography,y=HOBO_summary_clean,by=c("Site"))# Merge the demographic data with the temperature data
# Subset only ELVI data -----
demography_climate %>%
filter(Species=="ELVI")->demography_climate_elvi
demography_climate_elvi$surv1<-1*(!is.na(demography_climate_elvi$tiller_t) & !is.na(demography_climate_elvi$tiller_t1))
demography_climate_elvi$site_plot<-interaction(demography_climate_elvi$Site,demography_climate_elvi$Plot)
demography_climate_elvi$grow<-(log(demography_climate_elvi$tiller_t1+1) - log(demography_climate_elvi$tiller_t+1))# Relative growth rate
# names(demography_climate_elvi)
# view(demography_climate_elvi)
# summary(demography_climate_elvi)
# H1: We hypothesized that stress associated with aridity and low precipitation would strengthen the plant-fungal mutualism, such that the fitness benefits of endophyte symbiosis are maximized at the range edge. ----
## Survival----
## Read and format survival data to build the model
demography_climate_elvi %>%
subset( tiller_t > 0 )%>%
dplyr::select(year, Population, Site, Plot,site_plot, Endo, Herbivory,
tiller_t, surv1,temp_mean,temp_cv,water_mean,water_cv)%>%
na.omit %>%
mutate( Site= Site %>% as.factor %>% as.numeric,
Plot = Plot %>% as.factor %>% as.numeric,
site_plot=site_plot %>% as.factor %>% as.numeric,
Endo = Endo %>% as.factor %>% as.numeric,
Herbivory=Herbivory %>% as.factor %>% as.numeric,
Population = Population %>% as.factor %>% as.numeric ) %>%
mutate( log_size_t0 = log(tiller_t),
surv_t1=surv1,
log_temp_mean = log(temp_mean),
log_temp_cv = log(temp_cv),
log_water_mean = log(water_mean),
log_water_cv = log(water_cv))->demography_climate_elvi_surv
## Separate each variable to use the same model stan
data_sites_surv_temp_mean <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$log_temp_mean),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y_s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
data_sites_surv_temp_cv <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$log_temp_cv),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y_s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
data_sites_surv_water_mean <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$water_mean),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y_s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
data_sites_surv_water_cv <- list( n_sites    = demography_climate_elvi_surv$Site %>% n_distinct,
n_pops  = demography_climate_elvi_surv$Population %>% n_distinct(),
# survival data
n_plot_s = demography_climate_elvi_surv$Plot %>% n_distinct,
site_s   = demography_climate_elvi_surv$Site,
pop_s =  demography_climate_elvi_surv$Population,
plot_s  = demography_climate_elvi_surv$Plot,
temp_s=as.vector(demography_climate_elvi_surv$water_cv),
endo_s  = demography_climate_elvi_surv$Endo-1,
herb_s  = demography_climate_elvi_surv$Herbivory-1,
size_s   = demography_climate_elvi_surv$log_size_t0,
y_s      = demography_climate_elvi_surv$surv_t1,
n_s      = nrow(demography_climate_elvi_surv))
sim_pars <- list(
warmup = 1000,
iter = 4000,
thin = 3,
chains = 3
)
fit_allsites_surv_temp_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_temp_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
fit_allsites_surv_temp_cv <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_temp_cv,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
fit_allsites_surv_water_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_water_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
fit_allsites_surv_water_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_water_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
traceplot(fit_allsites_surv_temp_mean,inc_warmup=TRUE, pars = quote_bare(b0_s,bendo_s,bherb_s,btemp_s,btemp_s,
bendotemp_s,bherbtemp_s,bendoherb_s))+theme_bw()
## Chains convergence
traceplot(fit_allsites_surv_temp_mean,inc_warmup=TRUE, pars = quote_bare(b0_s,bendo_s,bherb_s,btemp_s,btemp_s,
bendotemp_s,bherbtemp_s))+theme_bw()
fit_allsites_surv_water_cv <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_water_cv,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
fit_allsites_surv_temp_mean <- stan(
file = "/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/ELVI-endophyte-density/Analysis/stan/elvi_survival.stan",
data = data_sites_surv_temp_mean,
warmup = sim_pars$warmup,
iter = sim_pars$iter,
thin = sim_pars$thin,
chains = sim_pars$chains)
